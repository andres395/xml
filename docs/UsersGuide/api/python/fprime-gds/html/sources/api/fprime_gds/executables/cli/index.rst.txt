:mod:`fprime_gds.executables.cli`
=================================

.. py:module:: fprime_gds.executables.cli

.. autoapi-nested-parse::

   cli.py:

   This file sets up the command line interface and argument parsing that is done to support the F prime executable tools
   layer. It is designed to allow users to import standard sets of arguments that applied to the various aspects of the
   code that they are importing.

   @author mstarch



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   fprime_gds.executables.cli.ParserBase
   fprime_gds.executables.cli.ImportParser
   fprime_gds.executables.cli.CommParser
   fprime_gds.executables.cli.LogDeployParser
   fprime_gds.executables.cli.MiddleWareParser
   fprime_gds.executables.cli.GdsParser
   fprime_gds.executables.cli.BinaryDeployment



.. data:: GUIS
   :annotation: = ['none', 'html']

   

.. py:class:: ParserBase

   Bases: :class:`abc.ABC`

   Parsers must define several functions. They must define "get_parser", which will produce a parser to parse the
   arguments, and an optional "handle_arguments" function to do any necessary processing of the arguments. Note: when
   handling arguments, the implementor should copy the incoming namespace if the original values of arguments will be
   modified.

   .. method:: get_parser()
      :staticmethod:
      :abstractmethod:


      Produce a parser that will handle the given arguments. These parsers can be combined for a CLI for a tool by
      assembling them as parent processors to a parser for the given tool.


   .. method:: handle_arguments(cls, args, **kwargs)
      :classmethod:
      :abstractmethod:


      Handle arguments from the given parser. The expectation is that the "args" namespace is taken in, processed, and
      a new namespace object is returned with the processed variants of the arguments. Copy the namespace object when
      modifying existing arguments.

      :param args: arguments namespace of processed arguments
      :return: namespace with processed results of arguments.


   .. method:: parse_args(parser_classes, description='No tool description provided', **kwargs)
      :staticmethod:


      Create a parser for the given application using the description provided. This will then add all specified
      ParserBase subclasses' get_parser output as parent parses for the created parser. Then all of the handel
      arguments methods will be called, and the final namespace will be returned.

      :param parser_classes: a list of ParserBase subclasses that will be used to
      :return: namespace with all parsed arguments from all provided ParserBase subclasses


   .. method:: find_in(token, deploy, is_file=True)
      :staticmethod:


      Find token in deploy directory by walking the directory looking for reg-ex. This effectively finds a file in a
      subtree and provides the path to it. Returns None when not found

      :param token: token to search for in the directory structure
      :param deploy: directory to start with
      :param is_file: true if looking for file, otherwise false
      :return: full path to token in tree



.. py:class:: ImportParser

   Bases: :class:`fprime_gds.executables.cli.ParserBase`

   Parser used to import new modules into the F prime namespace. This is how F prime can handle new modules and plugins
   by allowing the user to import new Python modules in, which may define new adapters and other items.

   .. method:: get_parser()
      :staticmethod:


      Creates a parser that reads '--import' arguments to import new modules.  Multiple '--import' are supported.

      :return: parser that can handle imports


   .. method:: handle_arguments(cls, args, **kwargs)
      :classmethod:


      Handle the import arguments by looping through them and importing each. Errors are printed to the console if an
      import failed, but no other effect is realized.

      :param args: parsed arguments namespace
      :return: args as input, has side effect of new imported modules


   .. method:: run_first()
      :staticmethod:


      Runs this parser once first so that other parsers can benefit from the existing imported libraries. If there is
      a problem, the help message will be minimal, but should work.



.. py:class:: CommParser

   Bases: :class:`fprime_gds.executables.cli.ParserBase`

   Handles parsing of all of the comm-layer arguments. This means selecting a comm adapter, and passing the arguments
   required to setup that comm adapter. In addition, this parser uses the import parser to import modules such that a
   user may import other adapter implementation files.

   .. method:: get_parser()
      :staticmethod:


      Produce a parser that will handle the given arguments. These parsers can be combined for a CLI for a tool by
      assembling them as parent processors to a parser for the given tool.


   .. method:: handle_arguments(cls, args, **kwargs)
      :classmethod:


      Handle the input arguments for the the parser. This will help setup the adapter with its expected arguments.

      :param args: parsed arguments in namespace format
      :return: namespace with "comm_adapter" value added



.. py:class:: LogDeployParser

   Bases: :class:`fprime_gds.executables.cli.ParserBase`

   A parser that handles log files by reading in a '--logs' directory or a '--deploy' directory to put the logs into
   as a default. This is useful as a parsing fragment for any application that produces log files and needs these logs
   to end up in the proper place.

   .. attribute:: first_log
      

      

   .. method:: get_parser()
      :staticmethod:


      Creates a new parser that can process "--deployment" and "--logs" arguments for use with any CLI producing log
      files. Can be used to construct parent arguments

      :return: parser with logging and deploy arguments


   .. method:: handle_arguments(cls, args, **kwargs)
      :classmethod:


      Read the arguments specified in this parser and validate the expected inputs.

      :param arg: parsed arguments as namespace
      :return: args namespace



.. py:class:: MiddleWareParser

   Bases: :class:`fprime_gds.executables.cli.ParserBase`

   Middleware (ThreadedTcpServer) interface that looks for an address and a port. The argument handling will attempt to
   connect to the socket to ensure that it is a valid address/port and report any errors. This is then immediately
   closes the port after use. There is a minor race-condition between this check and the actual usage, however; it
   should be close enough.

   .. method:: get_parser()
      :staticmethod:


      Sets up and parses the arguments required to run the data middleware layer. At this time, the data middleware is
      the threaded TCP server and thus the arguments are the ip address and port to listen to. May also be used in
      clients connecting to the middleware layer.

      :return: parser after arguments added


   .. method:: handle_arguments(cls, args, **kwargs)
      :classmethod:


      Checks to ensure that the specified port and address is available before connecting. This prevents user from
      attempting to run on a port that is unavailable.

      :param args: parsed argument namespace
      :return: args namespace



.. py:class:: GdsParser

   Bases: :class:`fprime_gds.executables.cli.ParserBase`

   Provides a parser for the following arguments:

   - dictionary: path to dictionary, either a folder for py_dicts, or a file for XML dicts
   - logs: path to logging path
   - config: configuration for GDS.

   Note: deployment can help in setting both dictionary and logs, but isn't strictly required.

   .. method:: get_parser()
      :staticmethod:


      Creates a parser to handle the arguments required to run the GDS layer. This allows the system to start up the
      GDS and connect into the middleware layer.

      :return: parser for arguments


   .. method:: handle_arguments(cls, args, **kwargs)
      :classmethod:


      Takes the arguments from the parser, and processes them into the needed map of key to dictionaries for the
      program. This will throw if there is an error.

      :param args: parsed args into a namespace
      :return: args namespace



.. py:class:: BinaryDeployment

   Bases: :class:`fprime_gds.executables.cli.ParserBase`

   Parsing subclass used to read the arguments of the binary application. This derives functionality from a comm parser
   and represents the flight-side of the equation.

   .. method:: get_parser()
      :staticmethod:


      Creates a parser to handle the arguments required to run the binary application. This allows the system to
      start up the F prime binary deployment, or ignore it.

      :return: parser for arguments


   .. method:: handle_arguments(cls, args, **kwargs)
      :classmethod:


      Takes the arguments from the parser, and processes them into the needed map of key to dictionaries for the
      program. This will throw if there is an error.

      :param args: parsed arguments in namespace
      :return: args namespaces



