:mod:`fprime_gds.common.gds_cli.command_send`
=============================================

.. py:module:: fprime_gds.common.gds_cli.command_send

.. autoapi-nested-parse::

   The implementation code for the command-send GDS CLI commands



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   fprime_gds.common.gds_cli.command_send.CommandSendCommand



.. py:class:: CommandSendCommand

   Bases: :class:`fprime_gds.common.gds_cli.base_commands.QueryHistoryCommand`

   The implementation for sending a command via the GDS to the spacecraft

   .. method:: get_closest_commands(project_dictionary: Dictionaries, command_name: str, num: int = 3)
      :staticmethod:


      Searches for the closest matching known command(s) to the given command
      name.

      :param project_dictionary: The dictionary object for this project
          containing the item type definitions
      :param command_name: The full string name of the command to search for
      :param num: The maximum number of near-matches to return
      :return: A list of the closest matching commands (potentially empty)


   .. method:: get_command_template(project_dictionary: Dictionaries, command_name: str)
      :staticmethod:


      Retrieves the command template for the given command name

      :param project_dictionary: The dictionary object for this project
          containing the item type definitions
      :param command_name: The full string name of the command to return a
          template for
      :return: The CmdTemplate object for the given command


   .. method:: get_command_help_message(project_dictionary: Dictionaries, command_name: str)
      :staticmethod:


      Returns a string showing a help message for the given GDS command.

      :param project_dictionary: The dictionary object for this project
          containing the item type definitions
      :param command_name: The full string name of the command to return a
          help message for
      :return: A help string for the command


   .. method:: _get_item_list(cls, project_dictionary: Dictionaries, filter_predicate: predicates.predicate)
      :classmethod:


      Gets a list of available commands in the system and return them in an
      ID-sorted list.

      :param project_dictionary: The dictionary object for the project
          containing the command definitions
      :param filter_predicate: Test API predicate used to filter shown
          channels


   .. method:: _get_upcoming_item(cls, api, filter_predicate, min_start_time='NOW', timeout=5.0)
      :classmethod:


      NOTE: Doesn't use _get_upcoming_item; sign that this should not use QueryHistory as a base class, and should refactor when time's available


   .. method:: _get_item_string(cls, item: CmdTemplate, json: bool = False)
      :classmethod:


      Converts the given command template into a human-readable string.

      :param item: The CmdTemplate to convert to a string
      :param json: Whether or not to return a JSON representation of "temp"
      :return: A readable string version of "item"


   .. method:: _execute_command(cls, connection_info: misc_utils.ConnectionInfo, search_info: misc_utils.SearchInfo, command_name: str, arguments: List[str])
      :classmethod:


      Handle the command-send arguments to connect to the Test API correctly,
      then send the command via the Test API.

      For more details on these arguments, see the command-send definition at:
          Gds/src/fprime_gds/executables/fprime_cli.py


   .. method:: handle_arguments(cls, *args, **kwargs)
      :classmethod:


      Handle the given input arguments, then execute the command itself

      NOTE: This is currently just a pass-through method



