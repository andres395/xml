:mod:`fprime_gds.common.communication.framing`
==============================================

.. py:module:: fprime_gds.common.communication.framing

.. autoapi-nested-parse::

   framing.py:

   This module defines all the framing constructs used when adapting the F prime ground system for use with communications
   or elsewhere in the system. There is an abstract base class called FramerDeframe, which defines the standard pattern of
   'frame', 'deframe', and the helper 'deframe_all'. This allows users to frame and deframe packets using base classes
   that implement this pattern. The current list of implementation classes are:

   1. FpFramerDeframer: a class used to write the now-standard F prime ground packet format
   2. TcpServerFramerDeframer: a non-symmetric framer/deframer for use interacting with the Tcp Server packet format

   @author lestarch



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   fprime_gds.common.communication.framing.FramerDeframer
   fprime_gds.common.communication.framing.FpFramerDeframer
   fprime_gds.common.communication.framing.TcpServerFramerDeframer



Functions
~~~~~~~~~

.. autoapisummary::

   fprime_gds.common.communication.framing.CHECKSUM_CALC


.. function:: CHECKSUM_CALC(_)

   Initial checksum implementation for FpFramerDeframer.


.. py:class:: FramerDeframer

   Bases: :class:`abc.ABC`

   Abstract base class of the Framer/Deframer variety. Framers and Deframers have to define two methods, one for
   framing a set of bytes and one for deframing a set of bytes into packets.

   .. method:: frame(self, data)
      :abstractmethod:


      Frames outgoing data in the specified format. Expects incoming raw bytes to frame, and adds on the needed header
      and footer bytes. This new array of bytes is returned from the method.

      :param data: bytes to frame
      :return: array of raw bytes representing a framed packet. Should be ready for uplink.


   .. method:: deframe(self, data, no_copy=False)
      :abstractmethod:


      Deframes the incoming data from the specified format. Produces exactly one packet, and leftover bytes. Users
      wanting all packets to be deframed should call "deframe_all". If no full packet is available, this method
      returns None. Expects incoming raw bytes to deframe, and returns a deframed packet or None, and the leftover
      bytes that were unused. Will search and discard data up until a start token is found. Note: data will be
      consumed up to the first start token found.

      :param data: framed data bytes
      :param no_copy: (optional) will prevent extra copy if True, but "data" input will be destroyed.
      :return: (packet as array of bytes or None, leftover bytes)


   .. method:: deframe_all(self, data, no_copy)


      Deframes all available packets found in a single set of bytes by calling deframe until a None packet is
      retrieved. This list of packets, and the remaining bytes are returned

      :param data: framed data bytes
      :param no_copy: (optional) will prevent extra copy if True, but "data" input will be destroyed.
      :return:



.. py:class:: FpFramerDeframer

   Bases: :class:`fprime_gds.common.communication.framing.FramerDeframer`

   Framing object used to read/write in the standard F prime format. This format is compatible with the standard ground
   system. It contains the following format for data:

   | token: start word |
   | token: data length |
   | bytes: F prime packet bytes (Fw::Comm, Fw::FilePacket, etc.) |
   | token: checksum |

   Where a token is a big-endian integer of TOKEN_SIZE bytes in length (see below)

   .. attribute:: TOKEN_SIZE
      :annotation: = 4

      

   .. attribute:: HEADER_SIZE
      

      

   .. attribute:: CHECKSUM_SIZE
      :annotation: = 4

      

   .. attribute:: MAXIMUM_DATA_SIZE
      :annotation: = 4096

      

   .. attribute:: TOKEN_TYPE
      

      

   .. attribute:: HEADER_FORMAT
      

      

   .. attribute:: START_TOKEN
      

      

   .. method:: set_constants(clazz)
      :classmethod:


      Setup the constants for the various token sizes. This will ensure that the system can read the tokens properly.
      This can be changed to make the framing more efficient.


   .. method:: frame(self, data)


      Frames outgoing data in the F prime standard format. Expects incoming raw bytes to frame, and adds on the
      needed framing tokens to the front and end of the bytes.

      :param data: bytes to frame
      :return: array of raw bytes representing a framed packet. Should be ready for uplink.


   .. method:: deframe(self, data, no_copy=False)


      Deframes the incoming data from the F prime standard format. Produces exactly one packet, and leftover bytes.
      Users wanting all packets to be deframed should call "deframe_all". If no full packet is available, this method
      returns None. Expects incoming raw bytes to deframe, and returns a deframed packet or None, and the leftover
      bytes that were unused. Will search and discard data up until a start token is found. Note: data will be
      consumed up to the first start token found.

      :param data: framed data bytes
      :param no_copy: (optional) will prevent extra copy if True, but "data" input will be destroyed.
      :return: (packet as array of bytes or None, leftover bytes)



.. py:class:: TcpServerFramerDeframer

   Bases: :class:`fprime_gds.common.communication.framing.FramerDeframer`

   Framing object used to read/write in the Tcp Server format. This format is compatible with the older ground
   system. It contains the following formats for data:

   Uplink (command) data:
   | string: 'ZZZZ' |
   | bytes: F prime packet bytes (Fw::Comm, Fw::FilePacket, etc.) |

   Downlink (ground-system) data:
   | string: 'A5A5 GUI ' |
   | U32: length of data |
   | bytes: F prime packet bytes (Fw::Comm, Fw::FilePacket, etc.) |

   WARNING: this is a non-symmetric framer/deframer as the Tcp Server's protocol isn't symmetric. Therefore, it should
   never be used to deframe its own framed data.

   .. attribute:: START_STRING
      :annotation: = ZZZZ

      

   .. method:: frame(self, data)


      Frames outgoing data in the Tcp server outgoing format. Expects incoming raw bytes to frame, and adds on the
      needed framing tokens to the front and end of the bytes.

      :param data: bytes to frame
      :return: array of raw bytes representing a framed packet. Should be ready for uplink.


   .. method:: deframe(self, data, no_copy=False)


      Deframes the incoming data from the F prime standard format. Produces exactly one packet, and leftover bytes.
      Users wanting all packets to be deframed should call "deframe_all". If no full packet is available, this method
      returns None. Expects incoming raw bytes to deframe, and returns a deframed packet or None, and the leftover
      bytes that were unused. Will search and discard data up until a start token is found. Note: data will be
      consumed up to the first start token found.

      :param data: framed data bytes
      :param no_copy: (optional) will prevent extra copy if True, but "data" input will be destroyed.
      :return: (packet as array of bytes or None, leftover bytes)



