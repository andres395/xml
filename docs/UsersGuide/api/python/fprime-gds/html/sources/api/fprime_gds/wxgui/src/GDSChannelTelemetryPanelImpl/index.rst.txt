:mod:`fprime_gds.wxgui.src.GDSChannelTelemetryPanelImpl`
========================================================

.. py:module:: fprime_gds.wxgui.src.GDSChannelTelemetryPanelImpl

.. autoapi-nested-parse::

   @brief Implementation class for the channel telemetry panel

   @date Created July 16, 2018
   @author Josef X. Biberstein

   @bug No known bugs



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   fprime_gds.wxgui.src.GDSChannelTelemetryPanelImpl.ChannelTelemetryImpl
   fprime_gds.wxgui.src.GDSChannelTelemetryPanelImpl.ChannelTelemDataViewModel



.. py:class:: ChannelTelemetryImpl(parent, ch_dict={}, config=None)

   Bases: :class:`fprime_gds.wxgui.src.GDSChannelTelemetryPanelGUI.ChannelTelemetry`

   Implmentation class. Defines functionality of the channel telemetry panel.

   .. method:: __del__(self)



   .. method:: data_callback(self, data, sender=None)


      Recieves data from decoders to which this consumer is registered

      :param data {Data Object} -- A Data Object containing the data passed from the decoder:
      :type data {Data Object} -- A Data Object containing the data passed from the decoder: e.g., an EventData object


   .. method:: getChannelTelemDataViewState(self)


      Get the internal data list used by the model to populate the data view for telem panel

      :returns: list -- list of ChData or PktData objects


   .. method:: setChannelTelemDataViewState(self, data)


      Set the internal data list used by the model to populate the data view for telem

      :param data {list} -- list of ChData or PktData objects:


   .. method:: onCopyKeyPressed(self, event)


      Callback for key pressed within the data view control


   .. method:: onCopyKeyPressedContext(self, event)


      Callback for pressing the copy option in the context menu of the data view ctrl

      :param event {wx.Event} -- standard event arg from WX:


   .. method:: onChannelTelemContextMenu(self, event)



   .. method:: onChannelTelemSelectChannelsButtonClick(self, event)



   .. method:: onChannelTelemShowHexCheckBoxClick(self, event)



   .. method:: onClickResetFilter(self, event)




.. py:class:: ChannelTelemDataViewModel(parent, ch_dict, config=None)

   Bases: :class:`wx.dataview.PyDataViewModel`

   This class acts as an intermediary between user data and the actual data
   view display. It stores data and maintains a mapping from data to items in
   the data view. Most of the methdos in this class just need to be defined
   and are called automatically by the data view.

   .. method:: GetColumnCount(self)


      Get the number of columns

      :returns: int -- the number of columns


   .. method:: GetColumnType(self, col)


      Get the data type associated with the given column

      :param col {int} -- the column index of interest:

      :returns: dict -- mapping from column index to type


   .. method:: GetChildren(self, parent, children)


      Return the children of a given parent

      :param parent {Item} -- the parent to get children of:
      :param children {List} -- list of the children Items:

      :returns: int -- length of children


   .. method:: IsContainer(self, item)


      Find out if the given item has children

      :param item {Item} -- the item to test:

      :returns: bool -- returns True if the argument has children


   .. method:: GetParent(self, item)


      Get the parent of the given item

      :param item {Item} -- input item:

      :returns: Item -- the parent of the argument item


   .. method:: GetValue(self, item, col)


      Return the value to be displayed for this item and column

      :param item {Item} -- the item whose value we will get:
      :param col {int} -- the column we will get the value from:

      :raises RuntimeError -- error if we get an object that we don't know how to handle:

      :returns: dict -- mapping from column to the value for a given item


   .. method:: GetAttr(self, item, col, attr)


      Get the attributes of the given item at the given column in the list control

      :param item {Item} -- item object in question:
      :param col {int} -- column number in question:
      :param attr {attr} -- the attribute object to set:

      :returns: bool -- True if attributes were set


   .. method:: UpdateModel(self, new_data)


      Add a new data item to the event log.

      :param new_data {EventData} -- the new event data to be added:


   .. method:: ChangeFilter(self, filt)


      Change the filter on this model

      :param filt {list} -- list of channel full names that we want to display:


   .. method:: SetData(self, data)


      Set the data used by this model to populate the data view

      :param data {list} -- list of ChData and/or PktData objects:


   .. method:: GetData(self)


      Get the list of data used by this model to populate the data view

      :returns: list -- the data used in this model



