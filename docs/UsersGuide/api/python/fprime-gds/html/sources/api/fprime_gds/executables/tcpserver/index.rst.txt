:mod:`fprime_gds.executables.tcpserver`
=======================================

.. py:module:: fprime_gds.executables.tcpserver


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   fprime_gds.executables.tcpserver.ThreadedTCPRequestHandler
   fprime_gds.executables.tcpserver.ThreadedUDPRequestHandler
   fprime_gds.executables.tcpserver.ThreadedTCPServer
   fprime_gds.executables.tcpserver.ThreadedUDPServer
   fprime_gds.executables.tcpserver.DestObj



Functions
~~~~~~~~~

.. autoapisummary::

   fprime_gds.executables.tcpserver.signal_handler
   fprime_gds.executables.tcpserver.now
   fprime_gds.executables.tcpserver.main


.. data:: __version__
   :annotation: = 0.1

   

.. data:: __date__
   :annotation: = 2015-04-03

   

.. data:: __updated__
   :annotation: = 2016-04-07

   

.. data:: SERVER
   

   

.. data:: LOCK
   

   

.. data:: shutdown_event
   

   

.. data:: FSW_clients
   :annotation: = []

   

.. data:: GUI_clients
   :annotation: = []

   

.. data:: FSW_ids
   :annotation: = []

   

.. data:: GUI_ids
   :annotation: = []

   

.. function:: signal_handler(*_)


.. function:: now()


.. py:class:: ThreadedTCPRequestHandler(request, client_address, server)

   Bases: :class:`socketserver.StreamRequestHandler`

   Derived from original Stable demo during R&TD and adapted
   for use in new FSW gse.py applicaiton.

   TCP socket server for commands, log events, and telemetry data.
   Later this will handle other things such as sequence files and parameters.

   Handle is instanced in own thread for each client.

   Registration is done by sending the string "Register <name>".
   Sending a message to destination <name> is done as
   "A5A5 <name> <data>" Note only <data> is sent.
   Any client that sends a "List" comment makes the server display all
   registered clients.

   .. attribute:: allow_reuse_address
      :annotation: = True

      

   .. attribute:: timeout
      :annotation: = 1

      

   .. method:: handle(self)


      The function that is invoked upon a new client.  This function listens
      for data on the socket.  Packets for now are assumed to be separated
      by a newline.  For each packet, call processPkt.


   .. method:: getCmds(self, inputString, end_of_command=b'\n')


      Build a command from partial or full socket input


   .. method:: processQueue(self)



   .. method:: processRegistration(self, cmd)



   .. method:: getNewMsg(self)


      After registration wait for an incoming message
      The first part must always be an "A5A5 " or a "List "


   .. method:: recv(self, l)


      Read l bytes from socket.


   .. method:: readHeader(self)


      Read the 9 byte header (e.g. "A5A5 GUI " or "A5A5 FSW "),
              or just read the "List
      " command.


   .. method:: readData(self, header)


      Read the data part of the message sent to either GUI or FSW.
      GUI receives telemetry.
      FSW receives commands of various lengths.


   .. method:: processNewPkt(self, header, data)


      Process a single command here header and data here.
      The command must always start with A5A5 except if it is a List.
      Once the entire header tstring is processed send it on queue.
      If something goes wrong report and shutdown server.



.. py:class:: ThreadedUDPRequestHandler(request, client_address, server)

   Bases: :class:`socketserver.BaseRequestHandler`

   Derived from original Stable demo during R&TD and adapted
   for use in new FSW gse.py applicaiton.

   TCP socket server for commands, log events, and telemetry data.
   Later this will handle other things such as sequence files and parameters.

   Handle is instanced in own thread for each client.

   Registration is done by sending the string "Register <name>".
   Sending a message to destination <name> is done as
   "A5A5 <name> <data>" Note only <data> is sent.
   Any client that sends a "List" comment makes the server display all
   registered clients.

   .. attribute:: allow_reuse_address
      :annotation: = True

      

   .. method:: handle(self)


      The function that is invoked when a packet is received.  This function listens
      for data on the socket.  Packets for now are assumed to be separated
      by a newline.  For each packet, call processPkt.


   .. method:: getNewMsg(self, packet)


      After registration wait for an incoming message
      The first part must always be an "A5A5 " or a "List "


   .. method:: readHeader(self, packet)


      Read the 9 byte header (e.g. "A5A5 GUI " or "A5A5 FSW "),
              or just read the "List
      " command.


   .. method:: readData(self, header, packet)


      Read the data part of the message sent to either GUI or FSW.
      GUI receives telemetry.
      FSW receives commands of various lengths.


   .. method:: processNewPkt(self, header, data)


      Process a single command here header and data here.
      The command must always start with A5A5 except if it is a List.
      Once the entire header string is processed send it on queue.
      If something goes wrong report and shutdown server.



.. py:class:: ThreadedTCPServer(server_address, RequestHandlerClass, bind_and_activate=True)

   Bases: :class:`socketserver.ThreadingMixIn`, :class:`socketserver.TCPServer`

   TCP Socket server.

   Keep a dictionary of destination objects containing queues and
   socket id's for writting to destinations.

   .. attribute:: dest_obj
      

      

   .. attribute:: lock_obj
      

      


.. py:class:: ThreadedUDPServer(server_address, RequestHandlerClass, bind_and_activate=True)

   Bases: :class:`socketserver.ThreadingMixIn`, :class:`socketserver.UDPServer`

   UDP Socket server.


.. py:class:: DestObj(name, request)

   Destination object for all clients registered.

   .. method:: put(self, msg)


      Write out the message to the destination socket


   .. method:: fileno(self)




.. function:: main(argv=None)


