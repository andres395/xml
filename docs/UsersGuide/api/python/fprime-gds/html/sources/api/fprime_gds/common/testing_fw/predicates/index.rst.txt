:mod:`fprime_gds.common.testing_fw.predicates`
==============================================

.. py:module:: fprime_gds.common.testing_fw.predicates

.. autoapi-nested-parse::

   predicates.py:

   This file contains basic predicates as well as event and telemetry predicates used by the
   gds_test_api.py. The predicates are organized by type and can be used to search histories.

   :author: koran



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   fprime_gds.common.testing_fw.predicates.predicate
   fprime_gds.common.testing_fw.predicates.less_than
   fprime_gds.common.testing_fw.predicates.greater_than
   fprime_gds.common.testing_fw.predicates.equal_to
   fprime_gds.common.testing_fw.predicates.not_equal_to
   fprime_gds.common.testing_fw.predicates.less_than_or_equal_to
   fprime_gds.common.testing_fw.predicates.greater_than_or_equal_to
   fprime_gds.common.testing_fw.predicates.within_range
   fprime_gds.common.testing_fw.predicates.is_a_member_of
   fprime_gds.common.testing_fw.predicates.is_not_a_member_of
   fprime_gds.common.testing_fw.predicates.always_true
   fprime_gds.common.testing_fw.predicates.invert
   fprime_gds.common.testing_fw.predicates.satisfies_all
   fprime_gds.common.testing_fw.predicates.satisfies_any
   fprime_gds.common.testing_fw.predicates.args_predicate
   fprime_gds.common.testing_fw.predicates.event_predicate
   fprime_gds.common.testing_fw.predicates.telemetry_predicate



Functions
~~~~~~~~~

.. autoapisummary::

   fprime_gds.common.testing_fw.predicates.is_predicate
   fprime_gds.common.testing_fw.predicates.get_descriptive_string


.. py:class:: predicate

   .. method:: __call__(self, item)
      :abstractmethod:


      A parent class to ensure that all predicates are callable, and return readable strings


   .. method:: __str__(self)
      :abstractmethod:


      Returns a string outlining the evaluation done by the predicate.


   .. method:: __repr__(self)


      Unless manually overwritten by a subclass both repr and str will return the same string.



.. function:: is_predicate(pred)

   a helper function to determine if an object can be used as a predicate.

   :return: a boolean value of whether the function is a predicate instance or has
       both __str__ and __call__ methods.


.. function:: get_descriptive_string(value, pred_function)

   a helper function that formats a predicate and argument in a nice human-readable format

   :param value: the argument of the predicate
   :param pred_function: a predicate function


.. py:class:: less_than(value)

   Bases: :class:`fprime_gds.common.testing_fw.predicates.predicate`

   .. method:: __call__(self, actual)


      :param actual: the value to compare


   .. method:: __str__(self)


      Returns a string outlining the evaluation done by the predicate.



.. py:class:: greater_than(value)

   Bases: :class:`fprime_gds.common.testing_fw.predicates.predicate`

   .. method:: __call__(self, actual)


      :param actual: the value to compare


   .. method:: __str__(self)


      Returns a string outlining the evaluation done by the predicate.



.. py:class:: equal_to(value)

   Bases: :class:`fprime_gds.common.testing_fw.predicates.predicate`

   .. method:: __call__(self, actual)


      :param actual: the value to compare


   .. method:: __str__(self)


      Returns a string outlining the evaluation done by the predicate.



.. py:class:: not_equal_to(value)

   Bases: :class:`fprime_gds.common.testing_fw.predicates.predicate`

   .. method:: __call__(self, actual)


      :param actual: the value to compare


   .. method:: __str__(self)


      Returns a string outlining the evaluation done by the predicate.



.. py:class:: less_than_or_equal_to(value)

   Bases: :class:`fprime_gds.common.testing_fw.predicates.predicate`

   .. method:: __call__(self, actual)


      :param actual: the value to compare


   .. method:: __str__(self)


      Returns a string outlining the evaluation done by the predicate.



.. py:class:: greater_than_or_equal_to(value)

   Bases: :class:`fprime_gds.common.testing_fw.predicates.predicate`

   .. method:: __call__(self, actual)


      :param actual: the value to compare


   .. method:: __str__(self)


      Returns a string outlining the evaluation done by the predicate.



.. py:class:: within_range(lower, upper)

   Bases: :class:`fprime_gds.common.testing_fw.predicates.predicate`

   .. method:: __call__(self, actual)


      :param actual: the value to evaluate


   .. method:: __str__(self)


      Returns a string outlining the evaluation done by the predicate.



.. py:class:: is_a_member_of(collection)

   Bases: :class:`fprime_gds.common.testing_fw.predicates.predicate`

   .. method:: __call__(self, item)


      Evaluates the predicate

      :param item: the object to search for then evaluate


   .. method:: __str__(self)


      Returns a string outlining the evaluation done by the predicate.



.. py:class:: is_not_a_member_of(collection)

   Bases: :class:`fprime_gds.common.testing_fw.predicates.predicate`

   .. method:: __call__(self, item)


      :param item: the object to search for then evaluate


   .. method:: __str__(self)


      Returns a string outlining the evaluation done by the predicate.



.. py:class:: always_true

   Bases: :class:`fprime_gds.common.testing_fw.predicates.predicate`

   .. method:: __call__(self, obj)


      used as a placeholder by other predicates. This is like a logical TRUE signal.
      :param obj: the object or value to evaluate


   .. method:: __str__(self)


      Returns a string outlining the evaluation done by the predicate.



.. py:class:: invert(pred)

   Bases: :class:`fprime_gds.common.testing_fw.predicates.predicate`

   .. method:: __call__(self, item)


      :param item: the object or value to evaluate


   .. method:: __str__(self)


      Returns a string outlining the evaluation done by the predicate.



.. py:class:: satisfies_all(pred_list)

   Bases: :class:`fprime_gds.common.testing_fw.predicates.predicate`

   .. method:: __call__(self, item)


      :param item: the object or value to evaluate


   .. method:: __str__(self)


      Returns a string outlining the evaluation done by the predicate.



.. py:class:: satisfies_any(pred_list)

   Bases: :class:`fprime_gds.common.testing_fw.predicates.predicate`

   .. method:: __call__(self, item)


      :param item: the object or value to evaluate


   .. method:: __str__(self)


      Returns a string outlining the evaluation done by the predicate.



.. py:class:: args_predicate(args)

   Bases: :class:`fprime_gds.common.testing_fw.predicates.predicate`

   .. method:: __call__(self, actual)


      Determines if the given array satisfies the given argument specification.


   .. method:: __str__(self)


      Returns a string outlining the evaluation done by the predicate.



.. py:class:: event_predicate(id_pred=None, args_pred=None, severity_pred=None, time_pred=None)

   Bases: :class:`fprime_gds.common.testing_fw.predicates.predicate`

   .. method:: __call__(self, event)


      The event_predicate checks that the telemetry object is an instance of EventData and will
      raise an error if the check fails. Then event_predicate will evaluate whether event's
      EventData fields satisfy the id_pred, value_pred, and time_pred specified.

      :param event: an instance of EventData (object)


   .. method:: __str__(self)


      Returns a string outlining the evaluation done by the predicate.



.. py:class:: telemetry_predicate(id_pred=None, value_pred=None, time_pred=None)

   Bases: :class:`fprime_gds.common.testing_fw.predicates.predicate`

   .. method:: __call__(self, telemetry)


      The telemetry_predicate checks that the telemetry object is an instance of ChData and will
      raise an error if the check fails. Then telemetry_predicate will evaluate whether
      telemetry's ChData fields satisfy the id_pred, value_pred and time_pred specified.

      :param telemetry: an instance of ChData (object)


   .. method:: __str__(self)


      Returns a string outlining the evaluation done by the predicate.



