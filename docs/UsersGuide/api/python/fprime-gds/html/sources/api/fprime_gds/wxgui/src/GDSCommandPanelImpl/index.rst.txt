:mod:`fprime_gds.wxgui.src.GDSCommandPanelImpl`
===============================================

.. py:module:: fprime_gds.wxgui.src.GDSCommandPanelImpl


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   fprime_gds.wxgui.src.GDSCommandPanelImpl.CommandsImpl



.. py:class:: CommandsImpl(parent, cname_dict, config=None)

   Bases: :class:`fprime_gds.wxgui.src.GDSCommandPanelGUI.Commands`

   Implementation file for the Command Panel GUI element

   .. method:: __del__(self)



   .. method:: register_encoder(self, enc)


      Register an encoder object to this object. Encoder must implement data_callback(data)

      :param enc {Encoder} -- The encoder to register:


   .. method:: updateCmdSearchPool(self)


      Updates the list of commands we are searching for in the command history


   .. method:: setupCommandArguments(self, temp)


      Render the command argument gui elements to the screen based on selected command

      :param temp {CmdTemplate} -- template object for the given command:


   .. method:: onCmdsComboBoxSelect(self, event)


      Set up the argument GUI elements for the command with the selected mneumonic


   .. method:: onCmdSendButtonClick(self, event)


      Gathers entered command arguments and sends them to all encoders


   .. method:: onCmdHistSearchButtonClick(self, event)



   .. method:: onCmdHistClearButtonClick(self, event)



   .. method:: onQuickCmdClearButtonClick(self, event)



   .. method:: onListBoxItemSelect(self, event)



   .. method:: onQuickCmdTextCtrlEnterPressed(self, event)



   .. method:: onQuickCmdSendButtonClick(self, event)



   .. method:: onCharQuickCmd(self, event)



   .. method:: onKeyUpQuickCmd(self, event)



   .. method:: onTextQuickCmd(self, event)



   .. method:: onKeyDownCmdComboBox(self, event)



   .. method:: onTextCmdComboBox(self, event)


      This the start of the autocomplete for the cmd combo box - finish if you want that feature and reach out to me if you want explanation (jxb@mit.edu)
      # Get current text in cbox
      text = self.CmdsComboBox.Value
      print text

      # Get current cursor position in cbox
      cpos = self.CmdsComboBox.GetInsertionPoint() + 1
      print cpos

      # Generate search term by ignoring everything after the insertion point
      search_term = text[:cpos]
      print search_term

      # Generate new cycler
      idxs = [i for i, v in enumerate(self.cname_dict.keys()) if v.startswith(search_term)]
      print(idxs)
      self._cmd_complete_search_pool = cycle(idxs)

      # Get first member in cycle
      idx = next(self._cmd_complete_search_pool)

      # Get the entry from cmd cbox that corresponds to this idx
      new_txt = self.CmdsComboBox.GetString(idx)

      # Set the cbox text to the new string
      self.CmdsComboBox.Value = new_txt

      # Set the insertion point and highlighting
      self.CmdsComboBox.SetInsertionPoint(cpos)
      self.CmdsComboBox.SetTextSelection(cpos, len(new_txt))


   .. method:: onTextEnterCmdComboBox(self, event)



   .. method:: onCharCmdComboBox(self, event)


      keycode = event.GetKeyCode()
      print keycode

      # Backspace pressed
      if keycode != 8:
          print self.CmdsComboBox.Value



