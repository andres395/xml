:mod:`fprime_gds.common.gds_cli.filtering_utils`
================================================

.. py:module:: fprime_gds.common.gds_cli.filtering_utils

.. autoapi-nested-parse::

   A set of utility classes and functions for filtering the items we want to return
   to the user in the GDS CLI



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   fprime_gds.common.gds_cli.filtering_utils.id_predicate
   fprime_gds.common.gds_cli.filtering_utils.component_predicate
   fprime_gds.common.gds_cli.filtering_utils.contains_search_string
   fprime_gds.common.gds_cli.filtering_utils.cmd_predicate
   fprime_gds.common.gds_cli.filtering_utils.time_to_data_predicate



Functions
~~~~~~~~~

.. autoapisummary::

   fprime_gds.common.gds_cli.filtering_utils.get_id_predicate
   fprime_gds.common.gds_cli.filtering_utils.get_component_predicate
   fprime_gds.common.gds_cli.filtering_utils.get_search_predicate
   fprime_gds.common.gds_cli.filtering_utils.get_full_filter_predicate


.. py:class:: id_predicate(id_num: int)

   Bases: :class:`fprime_gds.common.testing_fw.predicates.predicate`

   .. method:: __call__(self, item)


      :param item: The object or value to evaluate


   .. method:: __str__(self)


      Returns a string outlining the evaluation done by the predicate.



.. function:: get_id_predicate(ids: Iterable[int]) -> predicates.predicate

   Returns a Test API predicate that only accepts items with one of the given
   type IDs (if no IDs are given, accept all items).

   :param ids: A list of possible ID values to accept (empty if we should
       accept SysData with any ID)
   :return: A predicate that checks if a SysData object has one of the given
       IDs


.. py:class:: component_predicate(component: str)

   Bases: :class:`fprime_gds.common.testing_fw.predicates.predicate`

   .. method:: __call__(self, item)


      :param item: the object or value to evaluate


   .. method:: __str__(self)


      Returns a string outlining the evaluation done by the predicate.



.. function:: get_component_predicate(components: Iterable[str]) -> predicates.predicate

   Returns a Test API predicate that only accepts items from one of the given
   components (if no components are given, accept all items).

   :param components: A list of possible components to accept (empty if we
       should accept SysData from any component)
   :return: A predicate that checks if a SysData object come from one of the
       given components


.. py:class:: contains_search_string(search_string: str, to_string_func: Callable[[Any], str] = str)

   Bases: :class:`fprime_gds.common.testing_fw.predicates.predicate`

   .. method:: __call__(self, item)


      :param item: the object or value to evaluate


   .. method:: __str__(self)


      Returns a string outlining the evaluation done by the predicate.



.. function:: get_search_predicate(search_string: str, to_str: Callable[[Any], str] = str) -> predicates.predicate

   Returns a Test API predicate that only accepts items whose string
   representation contains the exact given term.

   :param search_string: The substring to look for in the given object
   :param to_str: An optional function for converting a given object to a
       string
   :return: A predicate that checks if an object contains "search_string" when
       it's converted to a string


.. function:: get_full_filter_predicate(ids: Iterable[int], components: Iterable[str], search_string: str, to_str: Callable[[Any], str] = str) -> predicates.predicate

   Returns a Test API predicate to only get recent data from the specified
   IDs/components, and containing the given search string. If any of these
   are left blank, no restrictions are assumed for that field.

   :param ids: A list of possible ID values to accept (empty if we should
       accept SysData with any ID)
   :param components: A list of possible components to accept (empty if we
       should accept SysData from any component)
   :param search_string: The substring to look for in the given object
   :param to_str: An optional function for converting a given object to a
       string

   :return: A predicate that only accepts SysData objects with the given
       IDs, components, and search term


.. py:class:: cmd_predicate

   Bases: :class:`fprime_gds.common.testing_fw.predicates.predicate`

   .. method:: __call__(self, cmd)


      The cmd_predicate checks that the object is an instance of CmdData.

      :param cmd: an object to check for being a CmdData object


   .. method:: __str__(self)


      Returns a string outlining the evaluation done by the predicate.



.. py:class:: time_to_data_predicate(time_predicate: predicates.predicate)

   Bases: :class:`fprime_gds.common.testing_fw.predicates.predicate`

   .. method:: __call__(self, item: SysData)


      Gets the given item's time and checks it using the passed-in predicate

      :param item: an object to check for being a CmdData object


   .. method:: __str__(self)


      Returns a string outlining the evaluation done by the predicate.



