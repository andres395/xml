:mod:`fprime_gds.common.loaders.python_loader`
==============================================

.. py:module:: fprime_gds.common.loaders.python_loader

.. autoapi-nested-parse::

   @brief Base class for all loaders that load dictionaries of python fragments

   The PythonLoader class inherits from the DictLoader base class and is intended
   to be inherited by all loader classes that read dictionaries in the file system
   made up of multiple python file fragments.

   This Class only adds helper functions and thus does not overwrite any methods in
   in the base DictLoader class. Because of this, all dictionaries returned from
   this class will be empty.

   @date Created July 3, 2018
   @author R. Joseph Paetz

   @bug No known bugs



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   fprime_gds.common.loaders.python_loader.PythonLoader



.. py:class:: PythonLoader

   Bases: :class:`fprime_gds.common.loaders.dict_loader.DictLoader`

   Class to help load python file based dictionaries

   .. method:: read_dict(self, path, use_superpkg=False)


      Reads all python modules at the given path and constructs a dict list

      This function assumes that path is a directory containing many python
      module files. Each module file has several fields with associated
      values. This function reads each file and constructs a dictionary using
      the fields and their values. These dictionaries are then compiled into
      a list that is returned.

      :param path: File Path to a folder containing python modules to load
      :param user_superpkg: [Default=False] When true, modules will be imported
                            using both the package and superpackage qualifiers
                            (from A.B import C instead of from B import C). This
                            allows multiple dictionaries with the same package
                            name to be imported. This is esspecially important
                            when trying to import dictionaries from multiple
                            deployments.

      :returns: A list of dictionaries. Each dictionary represents one loaded module
                and for keys has the names of the fields in the file and for values
                has the values of those fields.


   .. method:: importmodules(self, path, use_superpkg)


      Imports all modules in the given directory.

      :param path: File Path to a folder containing python modules to load
      :param user_superpkg: When true, modules will be imported
                            using both the package and superpackage qualifiers
                            (from A.B import C instead of from B import C). This
                            allows multiple dictionaries with the same package
                            name to be imported. This is esspecially important
                            when trying to import dictionaries from multiple
                            deployments.

      :returns: A list of module objects of all the newly imported modules



