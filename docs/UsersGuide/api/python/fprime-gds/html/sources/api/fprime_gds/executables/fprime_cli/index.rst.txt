:mod:`fprime_gds.executables.fprime_cli`
========================================

.. py:module:: fprime_gds.executables.fprime_cli

.. autoapi-nested-parse::

   Parses the given CLI command for the F' GDS, and then executes the correct
   command with the user-provided arguments on the GDS



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   fprime_gds.executables.fprime_cli.CliCommandParserBase
   fprime_gds.executables.fprime_cli.ChannelsParser
   fprime_gds.executables.fprime_cli.CommandSendParser
   fprime_gds.executables.fprime_cli.EventsParser



Functions
~~~~~~~~~

.. autoapisummary::

   fprime_gds.executables.fprime_cli.add_connection_arguments
   fprime_gds.executables.fprime_cli.add_retrieval_arguments
   fprime_gds.executables.fprime_cli.add_search_arguments
   fprime_gds.executables.fprime_cli.get_dictionary_path
   fprime_gds.executables.fprime_cli.add_valid_dictionary
   fprime_gds.executables.fprime_cli.create_parser
   fprime_gds.executables.fprime_cli.parse_args
   fprime_gds.executables.fprime_cli.main


.. function:: add_connection_arguments(parser: argparse.ArgumentParser)

   Adds the arguments needed to properly connect to the API, which the user may
   want to specify


.. function:: add_retrieval_arguments(parser: argparse.ArgumentParser)

   Adds all the arguments that affect how a commands retrieves a message generated by the GDS or F' instance


.. function:: add_search_arguments(parser: argparse.ArgumentParser, command_name: str)

   Adds all the arguments relevant to searching/filtering certain messages
   used by the Channels/Commands/Events commands with the given name used in
   the help text, due to the similarity of each of these commands


.. function:: get_dictionary_path(current_args: argparse.Namespace) -> str

   Returns the current project dictionary, either one provided by the user
   or the first one found in the current working directory. Raises an
   exception if neither one is found.


.. function:: add_valid_dictionary(args: argparse.Namespace) -> argparse.Namespace

   Takes in the given parsed arguments and, if no F' dictionary has been given,
   attempt to search for one in the current working directory. Throw an error
   if none can be found OR if the given dictionary is invalid.


.. py:class:: CliCommandParserBase

   Bases: :class:`abc.ABC`

   An abstract class for CLI commands to implement; provides methods for
   adding a new parser for this command

   .. method:: add_subparser(cls, parent_parser: argparse.ArgumentParser)
      :classmethod:


      Adds this command as a sub-command to an existing parser, so that it
      can be passed in as an argument (similar to git's CLI tool)


   .. method:: create_subparser(cls, parent_parser: argparse.ArgumentParser)
      :classmethod:
      :abstractmethod:


      Creates the parser for this command as a subparser of the given one,
      and then returns it


   .. method:: add_arguments(cls, parser: argparse.ArgumentParser)
      :classmethod:
      :abstractmethod:


      Add all the required and optional arguments for this command to the
      given parser


   .. method:: validate_args(cls, parser: argparse.ArgumentParser, args: argparse.Namespace)
      :classmethod:


      Validates the parsed arguments for this parser; if any are incorrect or
      missing, try to set them automatically if possible and error if this is
      not possible

      By default, tries to set the project dictionary


   .. method:: command_func(cls, *args, **kwargs)
      :classmethod:
      :abstractmethod:


      Executes the appropriate function when this command is called



.. py:class:: ChannelsParser

   Bases: :class:`fprime_gds.executables.fprime_cli.CliCommandParserBase`

   A parser for the "channels" CLI command, which lets users retrieve
   information about recent telemetry data from an F' instance

   .. method:: create_subparser(cls, parent_parser: argparse.ArgumentParser)
      :classmethod:


      Creates the channels sub-command as a subparser, and then returns it


   .. method:: add_arguments(cls, parser: argparse.ArgumentParser)
      :classmethod:


      Add all the required and optional arguments for this command to the
      given parser


   .. method:: command_func(cls, *args, **kwargs)
      :classmethod:


      Executes the appropriate function when "channels" is called



.. py:class:: CommandSendParser

   Bases: :class:`fprime_gds.executables.fprime_cli.CliCommandParserBase`

   A parser for the "command-send" CLI command, which lets users send commands
   from the GDS to a running F' instance and lets retrieve information about
   what commands are available

   .. method:: create_subparser(cls, parent_parser: argparse.ArgumentParser)
      :classmethod:


      Creates the command-send sub-command as a subparser, and then returns it


   .. method:: complete_command_name(prefix: str, parsed_args: argparse.Namespace, **kwargs)
      :staticmethod:


      Returns a list of all command names that could possibly complete the
      given prefix


   .. method:: add_arguments(cls, parser: argparse.ArgumentParser)
      :classmethod:


      Add all the required and optional arguments for this command to the
      given parser


   .. method:: validate_args(cls, parser: argparse.ArgumentParser, args: argparse.Namespace)
      :classmethod:


      Validates the parsed arguments for command_send; if any are incorrect or
      missing, try to set them automatically if possible and error if this is
      not possible


   .. method:: command_func(cls, *args, **kwargs)
      :classmethod:


      Executes the appropriate function when "command_send" is called



.. py:class:: EventsParser

   Bases: :class:`fprime_gds.executables.fprime_cli.CliCommandParserBase`

   A parser for the "events" CLI command, which lets users retrieve
   information about recent events logged on an F' instance

   .. method:: create_subparser(cls, parent_parser: argparse.ArgumentParser)
      :classmethod:


      Creates the events sub-command as a subparser, and then returns it


   .. method:: add_arguments(cls, parser: argparse.ArgumentParser)
      :classmethod:


      Add all the required and optional arguments for this command to the
      given parser


   .. method:: command_func(cls, *args, **kwargs)
      :classmethod:


      Executes the appropriate function when "events_parser" is called



.. function:: create_parser()


.. function:: parse_args(parser: argparse.ArgumentParser, arguments)

   Parses the given arguments and returns the resulting namespace; having this
   separate allows for unit testing if needed


.. function:: main()


