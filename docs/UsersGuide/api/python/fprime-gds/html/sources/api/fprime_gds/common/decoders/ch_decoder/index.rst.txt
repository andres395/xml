:mod:`fprime_gds.common.decoders.ch_decoder`
============================================

.. py:module:: fprime_gds.common.decoders.ch_decoder

.. autoapi-nested-parse::

   @brief Channel Decoder class used to parse binary channel telemetry data

   Decoders are responsible for taking in serialized data and parsing it into
   objects. Decoders receive serialized data (that had a specific descriptor) from
   a distributer that it has been registered to. The distributer will send the
   binary data after removing any length and descriptor headers.

   Example data that would be sent to a decoder that parses channels:
       +-------------------+---------------------+------------ - - -
       | ID (4 bytes) | Time Tag (11 bytes) | Data....
       +-------------------+---------------------+------------ - - -

   @date Created July 11, 2018
   @author R. Joseph Paetz

   @bug No known bugs



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   fprime_gds.common.decoders.ch_decoder.ChDecoder



.. py:class:: ChDecoder(ch_dict)

   Bases: :class:`fprime_gds.common.decoders.decoder.Decoder`

   Decoder class for Channel data

   .. method:: decode_api(self, data)


      Decodes the given data and returns the result.

      This function allows for non-registered code to call the same decoding
      code as is used to parse data passed to the data_callback function.

      :param data: Binary telemetry channel data to decode

      :returns: Parsed version of the channel telemetry data in the form of a
                ChData object or None if the data is not decodable


   .. method:: decode_ch_val(self, val_data, offset, template)


      Decodes the given channel's value from the given data

      :param val_data: Data to parse the value out of
      :param offset: Location in val_data to start the parsing
      :param template: Channel Template object for the channel

      :returns: The channel's value as an instance of a class derived from
                the BaseType class. The val_data has been deserialized using this
                object, and so the channel value can be retrieved from the obj's
                val field.



