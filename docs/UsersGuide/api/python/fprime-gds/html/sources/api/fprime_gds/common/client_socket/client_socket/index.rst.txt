:mod:`fprime_gds.common.client_socket.client_socket`
====================================================

.. py:module:: fprime_gds.common.client_socket.client_socket

.. autoapi-nested-parse::

   client_socket.py:

   Socket used to attach to the TCP server as a client and read/write data.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   fprime_gds.common.client_socket.client_socket.ThreadedTCPSocketClient



.. data:: GUI_TAG
   :annotation: = GUI

   

.. data:: FSW_TAG
   :annotation: = FSW

   

.. py:class:: ThreadedTCPSocketClient(sock=None, dest=FSW_TAG)

   Bases: :class:`fprime_gds.common.handlers.DataHandler`

   Threaded TCP client that connects to the socket server that serves packets from the flight
   software

   .. method:: get_data_bytes(self, string_data)


      Convert the data bytes from string to bytes

      :param string_data: data in string format
      :return: data in bytes format


   .. method:: get_data_string(self, bytes_data)


      Convert the data bytes from string to bytes

      :param bytes_data: data in bytes format
      :return: data in string format


   .. method:: register_distributor(self, distributor)


      Registers a fprime.gds.distributor object with this socket

      :param fprime.gds.distributor {Distributor} -- Distributor must implement data_callback:


   .. method:: register_to_server(self, register_as)


      Registers the caller to the server as type register_as

      This function assumes the socket connects to an fprime TCP server

      :param register_as: How to identify this process to the TCP server
                          Can be either "FSW" or "GUI"
      :type register_as: string


   .. method:: connect(self, host, port)


      Connect to host at given port and start the threaded recv method.

      :param host {string} -- IP of the host server:
      :param port {int} -- Port of the host server:


   .. method:: disconnect(self)


      Disconnect the socket client from the server and stop the internal thread.


   .. method:: data_callback(self, data, sender=None)


      Handles incoming data by sending it to a socket.

      :param data: data to send to the client socket
      :param sender: sender source of the data


   .. method:: send(self, data, dest)


      Send data to the server

      All necessary headers are added in this function.

      :param data {binary} -- The data to send (What you want the destination: to receive)
      :param dest {String} -- Where to send the data to. Either "FSW" or "GUI":


   .. method:: recv(self)


      Method run constantly by the enclosing thread. Looks for data from the server.



