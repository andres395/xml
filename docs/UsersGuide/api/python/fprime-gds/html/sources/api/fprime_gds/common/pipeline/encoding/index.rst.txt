:mod:`fprime_gds.common.pipeline.encoding`
==========================================

.. py:module:: fprime_gds.common.pipeline.encoding

.. autoapi-nested-parse::

   encoding.py:

   This file sets up the encoding and decoding handlers for use with the standard pipeline. This encapsulates the encoding
   and decoding into a single component that the be composed into the standard pipeline.

   @mstarch



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   fprime_gds.common.pipeline.encoding.EncodingDecoding



.. py:class:: EncodingDecoding

   Sets up and runs the encoding and decoding for the standard pipeline. This include the following encoders and
   decoders for standard setups:

   1. Events decoding
   2. Channel decoding
   3. File decoding
   4. Command encoding
   5. File encoding

   .. method:: setup_coders(self, dictionaries, distributor, sender)


      Sets up the encoder and decoder layer of the GDS pipeline. This requires a dictionary set that has loaded the
      dictionaries needed for the decoders to work correctly. This will register then register the decoders with a
      supplied distributor to handle known types with the known decoders. Lastly, the sender will be registered to the
      encoder to handle the encoded data going out.

      :param dictionaries: a dictionaries handling object holding dictionaries
      :param distributor: distributor of data to register to


   .. method:: send_command(self, command)


      Sends a command to the registered command encoder, and further down the stream. Note: this contains a local
      loopback to any command consumers to ensure that histories and logging are updated.

      :param command: command object to send


   .. method:: register_event_consumer(self, consumer)


      Registers a history with the event decoder.

      :param consumer: consumer of events


   .. method:: remove_event_consumer(self, consumer)


      Removes a history from the event decoder. Will raise an error if the history was not
      previously registered.

      :param consumer: consumer of events
      :return: a boolean indicating if the consumer was removed.


   .. method:: register_channel_consumer(self, consumer)


      Registers a history with the telemetry decoder.

      :param consumer: consumer of channels


   .. method:: remove_channel_consumer(self, consumer)


      Removes a history from the telemetry decoder. Will raise an error if the history was not
      previously registered.

      :param consumer: consumer of channels
      :return: a boolean indicating if the consumer was removed.


   .. method:: register_command_consumer(self, consumer)


      Registers a history with the standard pipeline.

      :param consumer: consumer of commands


   .. method:: remove_command_consumer(self, consumer)


      Removes a history that is subscribed to command data. Will raise an error if the history
      was not previously registered.

      :param consumer: consumer of commands
      :return: a boolean indicating if the consumer was removed.


   .. method:: register_packet_consumer(self, consumer)


      Registers a history with the standard pipeline.

      :param consumer: consumer of packets


   .. method:: deregister_packet_consumer(self, consumer)


      Removes a history that is subscribed to command data. Will raise an error if the history
      was not previously registered.

      :param consumer: consumer of packets
      :return: a boolean indicating if the consumer was removed.



