:mod:`fprime_gds.executables.run_deployment`
============================================

.. py:module:: fprime_gds.executables.run_deployment


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   fprime_gds.executables.run_deployment.get_args
   fprime_gds.executables.run_deployment.launch_process
   fprime_gds.executables.run_deployment.launch_tts
   fprime_gds.executables.run_deployment.launch_wx
   fprime_gds.executables.run_deployment.launch_html
   fprime_gds.executables.run_deployment.launch_app
   fprime_gds.executables.run_deployment.launch_comm
   fprime_gds.executables.run_deployment.main


.. function:: get_args()

   Gets an argument parsers to read the command line and process the arguments. Return
   the arguments in their namespace.

   :param args: arguments to supply


.. function:: launch_process(cmd, logfile=None, name=None, env=None, launch_time=5)

   Launch a child subprocess. This subprocess will allow the child to run outside of the memory context of Python.

   :param cmd: list of command arguments to run by handing to subprocess.
   :param logfile: (optional) place to redirect output to for purposes of logging. Default: None, screen.
   :param name: (optional) short name for printing messages.
   :param env: (optional) environment to run in. Allows for special environment contexts.
   :param launch_time: (optional) time to launch the process, before rendering an error.
   :return: running process


.. function:: launch_tts(tts_port, tts_addr, logs, **_)

   Launch the Threaded TCP Server

   :param tts_port: port to attach to
   :param tts_addr: address to bind to
   :param logs: logs output directory
   :return: process


.. function:: launch_wx(port, dictionary, connect_address, log_dir, config, **_)

   Launch the GDS gui

   :param port: port to connect to
   :param dictionary: dictionary to look at
   :param connect_address: address to connect to
   :param log_dir: directory to place logs
   :param config: configuration to use
   :return: process


.. function:: launch_html(tts_port, dictionary, connect_address, logs, **extras)

   Launch the flask server and a browser pointed at the HTML page.

   :param tts_port: port to connect to
   :param dictionary: dictionary to look at
   :param connect_address: address to connect to
   :param logs: directory to place logs
   :return: process


.. function:: launch_app(app, port, address, logs, **_)

   Launch the app

   :param app: application to launch
   :param port: port to connect to
   :param address: address to connect to
   :param log_dir: log directory to place files into
   :return: process


.. function:: launch_comm(comm_adapter, tts_port, connect_address, logs, **all_args)

   :return:


.. function:: main()

   Main function used to launch processes.


