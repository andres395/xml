:mod:`fprime_gds.common.communication.adapters.uart`
====================================================

.. py:module:: fprime_gds.common.communication.adapters.uart

.. autoapi-nested-parse::

   uart.py:

   This is the adapter for projects that would choose to use a serial UART interface for sending data from an F prime
   deployment. This handles sending and receiving data from the things like 'LinuxSerialDriver' and other standard UART
   drivers.

   @author lestarch



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   fprime_gds.common.communication.adapters.uart.SerialAdapter



.. data:: LOGGER
   

   

.. py:class:: SerialAdapter(device, baud)

   Bases: :class:`fprime_gds.common.communication.adapters.base.BaseAdapter`

   Supplies a data source adapter that is pulling data off from a UART wire using PySerial. This is setup using a
   device handle and a baudrate for the given serial device.

   .. attribute:: BAUDS
      :annotation: = [50, 75, 110, 134, 150, 200, 300, 600, 1200, 1800, 2400, 4800, 9600, 19200, 38400, 57600, 115200, 230400, 460800, 500000, 576000, 921600, 1000000, 1152000, 1500000, 2000000, 2500000, 3000000, 3500000, 4000000]

      

   .. method:: open(self)


      Opens the serial port based on previously supplied settings. If the port is already open, then close it first.
      Then open the port up again.


   .. method:: close(self)


      Close the serial device, and ignore any errors that might arrive when attempting that closure.


   .. method:: write(self, frame)


      Send a given framed bit of data by sending it out the serial interface. It will attempt to reconnect if there is
      was a problem previously. This function will return true on success, or false on error.

      :param frame: framed data packet to send out
      :return: True, when data was sent through the UART. False otherwise.


   .. method:: read(self, timeout=0.5)


      Read up to a given count in bytes from the UART adapter. This may return less than the full requested size but
      is expected to return some data.

      :param timeout: timeout for reading data from the serial.
      :return: data successfully read


   .. method:: get_arguments(cls)
      :classmethod:


      Returns a dictionary of flag to argparse-argument dictionaries for use with argparse to setup arguments.

      :return: dictionary of flag to argparse arguments for use with argparse


   .. method:: check_arguments(cls, args)
      :classmethod:


      Code that should check arguments of this adapter. If there is a problem with this code, then a "ValueError"
      should be raised describing the problem with these arguments.

      :param args: arguments as dictionary



