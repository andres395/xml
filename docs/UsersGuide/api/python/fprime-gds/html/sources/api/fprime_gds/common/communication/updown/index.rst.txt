:mod:`fprime_gds.common.communication.updown`
=============================================

.. py:module:: fprime_gds.common.communication.updown

.. autoapi-nested-parse::

   Uplink and Downlink handling for communications layer

   Downlink needs to happen in several stages. First, raw data is read from the adapter. This data is collected in a pool
   and the pool is passed to a deframer that extracts frames from this pool. Frames are queued and sent to the ground
   side where they are and passed into the ground side handler and onto the other GDS processes. Downlink handles multiple
   streams of data the FSW downlink, and loopback data from the uplink adapter.

   Uplink is the reverse, it pulls data in from the ground handler, frames it, and sends it up to the waiting FSW. Uplink
   is represented by a single thread, as it is not dealing with multiple streams of data that need to be multiplexed.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   fprime_gds.common.communication.updown.Downlinker
   fprime_gds.common.communication.updown.Uplinker



.. data:: DW_LOGGER
   

   

.. data:: UP_LOGGER
   

   

.. py:class:: Downlinker(adapter: BaseAdapter, ground: GroundHandler, deframer: FramerDeframer)

   Encapsulates communication downlink functions

   Handles downlink creating two threads, one to read and deframe, and the other to send data out to the ground side
   of the system. It is composed of an adapter used to read from the interface, a deframer that is used to deframe
   incoming data, and a ground handler that is used to interact with the ground side of the system.

   Two threaded stages are used to multiplex between loopback data and FSW downlink data without the need to busy spin
   waiting for data.

   .. method:: start(self)


      Starts the downlink pipeline


   .. method:: deframing(self)


      Deframing stage of downlink

      Reads in data from the raw adapter and runs the deframing. Collects data in a pool and continually runs
      deframing against it where possible. Then appends new frames into the outgoing queue.


   .. method:: sending(self)


      Outgoing stage of downlink

      Adapts the downlink adapter to the rest of the GDS system by draining the outgoing queue and sending those
      packets to the rest of the GDS. This uses the ground send_all method.


   .. method:: stop(self)


      Stop the thread depends will close the ground resource which may be blocking


   .. method:: join(self)


      Join on the ending threads


   .. method:: add_loopback_frame(self, frame)


      Adds a frame to loopback to ground

      Some uplink processes are virtualized on the ground, and thus must loopback packets. This is used for data
      handshaking that the FSW may not support.

      :param frame: frame to loopback to ground



.. py:class:: Uplinker(adapter: BaseAdapter, ground: GroundHandler, framer: FramerDeframer, loopback: Downlinker)

   Uplinker used to pull data out of the ground layer and send to FSW

   Handles uplink by creating a single thread to read data from the ground layer, frame it, and pass it to the adapter
   to the hardware link to flight software. It is composed of an adapter used to write to the interface, a framer
   that is used to frame outgoing data, and a ground handler that is used to interact with the ground side of the
   system.

   Since there is one stream of data the uplink requires only one thread to run.

   .. attribute:: RETRY_COUNT
      :annotation: = 3

      

   .. method:: start(self)


      Starts the uplink pipeline


   .. method:: uplink(self)


      Runs uplink of data from ground to FSW

      Primary stage of the uplink process, reads data from the ground adapter, and passes the rest of the data to the
      framer, and then onto the adapter to send to FSW. Uplink also generates handshake packets as the current FSW
      does not generate handshake packets.


   .. method:: stop(self)


      Stop the thread depends will close the ground resource which may be blocking


   .. method:: join(self)


      Join on the ending threads


   .. method:: get_handshake(packet: bytes)
      :staticmethod:


      Gets a handshake raw frame from the last packet

      Creates a handshake raw-frame by repeating the contents of the last packet with a handshake descriptor at the
      front.

      :param packet: packet to repeat back out as handshake

      :returns: handshake packet



