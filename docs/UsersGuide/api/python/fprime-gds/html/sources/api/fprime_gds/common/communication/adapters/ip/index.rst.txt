:mod:`fprime_gds.common.communication.adapters.ip`
==================================================

.. py:module:: fprime_gds.common.communication.adapters.ip

.. autoapi-nested-parse::

   ip.py:

   Module containing a comm-layer adapter for the Tcp/UDP/IP stack. This pairs with the F prime component "SocketIpDriver"
   in order to read data being sent via Tcp or Udp. This is the default adapter used by the system to handle data sent
   across a Tcp and/or UDP network interface.

   @author lestarch



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   fprime_gds.common.communication.adapters.ip.IpAdapter
   fprime_gds.common.communication.adapters.ip.IpHandler
   fprime_gds.common.communication.adapters.ip.TcpHandler
   fprime_gds.common.communication.adapters.ip.UdpHandler



Functions
~~~~~~~~~

.. autoapisummary::

   fprime_gds.common.communication.adapters.ip.check_port


.. data:: LOGGER
   

   

.. function:: check_port(address, port)

   Checks a given address and port to ensure that it is available. If not available, a ValueError is raised. Note: this
   is done by binding to an address. It does not call "listen"

   :param address: address that will bind to
   :param port: port to bind to


.. py:class:: IpAdapter(address, port)

   Bases: :class:`fprime_gds.common.communication.adapters.base.BaseAdapter`

   Adapts IP traffic for use with the GDS ground system. This serves two different "servers" both on the same address
   and port, but one uses TCP and the other uses UDP. Writes go to the TCP connection, and reads request data from
   both. This data is concatenated and returned up the stack for processing.

   .. attribute:: KEEPALIVE_INTERVAL
      :annotation: = 0.5

      

   .. attribute:: KEEPALIVE_DATA
      :annotation: = b'sitting well'

      

   .. attribute:: MAXIMUM_DATA_SIZE
      :annotation: = 4096

      

   .. method:: open(self)


      Open up the interface to the stored Address and Port. This will create a TCP and UDP socket. The TCP socket will
      be bound to the address, and listened to for incoming connects.


   .. method:: close(self)


      Close the adapter, by setting the stop flag


   .. method:: th_handler(self, handler)


      Adapter thread function


   .. method:: write(self, frame)


      Send a given framed bit of data by sending it out the serial interface. It will attempt to reconnect if there is
      was a problem previously. This function will return true on success, or false on error.

      :param frame: framed data packet to send out
      :return: True, when data was sent through the UART. False otherwise.


   .. method:: read(self, timeout=0.5)


      Read up to a given count in bytes from the TCP adapter. This may return less than the full requested size but
      is expected to return some data.

      :param timeout: timeout to wait for data. Needed as the get call below may not interrupt if it waits forever
      :return: data successfully read or "" when no data available within timeout


   .. method:: th_alive(self, interval)


      Run this thread in order to accept incoming connections and spiral them off into another thread for handling the
      given client.


   .. method:: get_arguments(cls)
      :classmethod:


      Returns a dictionary of flag to argparse-argument dictionaries for use with argparse to setup arguments.

      :return: dictionary of flag to argparse arguments for use with argparse


   .. method:: check_arguments(cls, args)
      :classmethod:


      Code that should check arguments of this adapter. If there is a problem with this code, then a "ValueError"
      should be raised describing the problem with these arguments.

      :param args: arguments as dictionary



.. py:class:: IpHandler(address, port, adapter_type, server=True, logger=logging.getLogger('ip_handler'), post_connect=None)

   Bases: :class:`abc.ABC`

   Base handler for IP types. This will provide the basic methods, and synchronization for reading/writing to multiple
   child implementations, namely: UDP and TCP. These child objects can then be instantiated individually.

   .. attribute:: ERROR_RETRY_INTERVAL
      :annotation: = 1

      

   .. attribute:: MAX_CLIENT_BACKLOG
      :annotation: = 1

      

   .. attribute:: CONNECTING
      :annotation: = CONNECTING

      

   .. attribute:: CONNECTED
      :annotation: = CONNECTED

      

   .. attribute:: CLOSED
      :annotation: = CLOSED

      

   .. method:: open(self)


      Open up this IP type adapter. Returning if already connected.


   .. method:: open_impl(self)
      :abstractmethod:


      Implementation of the handler's open call


   .. method:: close(self)


      Close this specific IP handler. This involves setting connected to False, and closing non-null sockets.


   .. method:: close_impl(self)
      :abstractmethod:


      Implementation of the handler's close call


   .. method:: stop(self)


      Stop the handler from reconnecting and close


   .. method:: read(self)


      Reads a single message after ensuring that the socket is fully open. On a non-timeout error, close the socket in
      preparation for a reconnect. This internally will call the child's read_impl

      :return: data read from TCP server or b"" when nothing is available


   .. method:: read_impl(self)
      :abstractmethod:


      Implementation of the handler's read call


   .. method:: write(self, message)


      Writes a single message after ensuring that the socket is fully open. On any error, close the socket in
      preparation for a reconnect. This internally will call the child's write_impl

      :param message: message to send
      :return: True if all data was written, False otherwise


   .. method:: write_impl(self, message)
      :abstractmethod:


      Implementation of the handler's write call


   .. method:: kill_socket(sock)
      :staticmethod:


      Kills a socket connection, but shutting it down and then closing.



.. py:class:: TcpHandler(address, port, server=True, logger=logging.getLogger('tcp_handler'), post_connect=None)

   Bases: :class:`fprime_gds.common.communication.adapters.ip.IpHandler`

   An IpAdapter that allows for interfacing with TCP socket.

   .. method:: open_impl(self)


      Open up this particular adapter. This adapter


   .. method:: close_impl(self)


      Close the TCP socket that was spawned as appropriate.


   .. method:: read_impl(self)


      Specific read implementation for the TCP handler. This involves reading from the spawned client socket, not the
      primary socket.


   .. method:: write_impl(self, message)


      Send is implemented with TCP. It will send it to the connected client.

      :param message: message to send out



.. py:class:: UdpHandler(address, port, server=True, logger=logging.getLogger('udp_handler'))

   Bases: :class:`fprime_gds.common.communication.adapters.ip.IpHandler`

   Handler for UDP traffic. This will work in unison with the TCP adapter.

   .. method:: open_impl(self)


      No extra steps required


   .. method:: close_impl(self)


      No extra steps required


   .. method:: read_impl(self)


      Receive from the UDP handler. This involves receiving from an unconnected socket.


   .. method:: write_impl(self, message)
      :abstractmethod:


      Write not implemented with UDP



