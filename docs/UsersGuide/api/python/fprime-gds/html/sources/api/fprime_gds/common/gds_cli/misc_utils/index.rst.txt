:mod:`fprime_gds.common.gds_cli.misc_utils`
===========================================

.. py:module:: fprime_gds.common.gds_cli.misc_utils

.. autoapi-nested-parse::

   TODO: Find more appropriate places for these.

   This is the Isle of Misfit Functions used by the GDS CLI, ones that I wasn't
   sure where else to put. Please find a better home for them when you have time
   (i.e. a more organized file).



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   fprime_gds.common.gds_cli.misc_utils.repeat_until_interrupt
   fprime_gds.common.gds_cli.misc_utils.get_item_json_string
   fprime_gds.common.gds_cli.misc_utils.get_item_string
   fprime_gds.common.gds_cli.misc_utils.get_cmd_template_string


.. data:: ConnectionInfo
   

   

.. data:: SearchInfo
   

   

.. function:: repeat_until_interrupt(func: Callable, *args)

   Continues to call the input function with the given arguments until the
   user interrupts it.

   :param func: The function you want to call repeatedly. If the function
       returns anything, it MUST return a new, updated tuple of the arguments
       passed into it in the same order, which will be used as the new
       arguments in the next iteration. This is done to allow for persistent
       state between iterations; if needed, create a wrapper for your original
       function to do this. If the function does NOT return anything, the
       original input arguments will continue to be used
   :param args: All keyword arguments you want to pass into "func"


.. function:: get_item_json_string(gds_item, tab_spaces: int = 2) -> str

   Converts the given F Prime GDS data item into a JSON-formatted string.

   :param gds_item: The item to convert to JSON
   :param tab_spaces: The (number of spaces to use for indented lines
   :return: A string of the gds_item in JSON format


.. function:: get_item_string(item: SysData, as_json: bool = False) -> str

   Takes in the given SysData and prints out a human-readable string
   representation of its information.

   :param item: The item to create a string for
   :param as_json: Return a JSON-string representation of the given item
       instead
   :return: A readable string of the item information


.. function:: get_cmd_template_string(item: CmdTemplate, as_json: bool = False) -> str

   Converts the given command template into a human-readable string.

   :param item: The CmdTemplate to convert to a string
   :param as_json: Whether or not to return a JSON representation of "temp"
   :return: A readable string version of "item"


