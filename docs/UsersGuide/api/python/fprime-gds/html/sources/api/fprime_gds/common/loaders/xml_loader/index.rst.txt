:mod:`fprime_gds.common.loaders.xml_loader`
===========================================

.. py:module:: fprime_gds.common.loaders.xml_loader

.. autoapi-nested-parse::

   @brief Base class for all loaders that load dictionaries from xml dictionaries

   The XmlLoader class inherits from the DictLoader base class and is intended
   to be inherited by loader classes that find its helper functions useful for
   parsing xml dictionaries.

   This class does not implement any core loader functions, it just adds common
   helper functions

   @date Created July 19, 2018
   @author R. Joseph Paetz

   @bug No known bugs



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   fprime_gds.common.loaders.xml_loader.XmlLoader



.. py:class:: XmlLoader

   Bases: :class:`fprime_gds.common.loaders.dict_loader.DictLoader`

   Class to help load xml based dictionaries

   .. attribute:: ENUM_SECT
      :annotation: = enums

      

   .. attribute:: ENUM_TYPE_TAG
      :annotation: = type

      

   .. attribute:: ENUM_ELEM_NAME_TAG
      :annotation: = name

      

   .. attribute:: ENUM_ELEM_VAL_TAG
      :annotation: = value

      

   .. attribute:: ENUM_ELEM_DESC_TAG
      :annotation: = description

      

   .. attribute:: SER_SECT
      :annotation: = serializables

      

   .. attribute:: SER_TYPE_TAG
      :annotation: = type

      

   .. attribute:: SER_MEMB_SECT
      :annotation: = members

      

   .. attribute:: SER_MEMB_NAME_TAG
      :annotation: = name

      

   .. attribute:: SER_MEMB_FMT_STR_TAG
      :annotation: = format_specifier

      

   .. attribute:: SER_MEMB_DESC_TAG
      :annotation: = description

      

   .. attribute:: SER_MEMB_TYPE_TAG
      :annotation: = type

      

   .. attribute:: ARR_SECT
      :annotation: = arrays

      

   .. attribute:: ARR_NAME_TAG
      :annotation: = name

      

   .. attribute:: ARR_TYPE_TAG
      :annotation: = type

      

   .. attribute:: ARR_SIZE_TAG
      :annotation: = size

      

   .. attribute:: ARR_FORMAT_TAG
      :annotation: = format

      

   .. attribute:: ARR_DEFAULT_TAG
      :annotation: = defaults

      

   .. attribute:: ARR_DEFAULT_VALUE_TAG
      :annotation: = value

      

   .. attribute:: ARGS_SECT
      :annotation: = args

      

   .. attribute:: ARG_NAME_TAG
      :annotation: = name

      

   .. attribute:: ARG_DESC_TAG
      :annotation: = description

      

   .. attribute:: ARG_TYPE_TAG
      :annotation: = type

      

   .. attribute:: STR_LEN_TAG
      :annotation: = len

      

   .. method:: get_xml_tree(self, path)


      Reads the xml file at the given path and parses it using lxml

      :param path: Path to the xml dictionary file
      :type path: string

      :returns: An lxml etree root object containing the parsed xml file
                information. Raises an exception if there is an error.


   .. method:: get_xml_section(self, section_name, xml_root)


      Retrieve the given section in the xml tree if it exists

      :param section_name: Section to retrieve
      :type section_name: string
      :param xml_root: xml object to search in
      :type xml_root: lxml etree root

      :returns: The xml object of the desired section if found, or None if not


   .. method:: get_args_list(self, xml_obj, xml_tree)


      Parses and returns a standard xml dict arguments section:
        Section name: "args"
        Object tags: "arg"
        Object fields: "name", "type", "description"(optional)

      :param xml_obj: xml object containing the args section
                      to parse.
      :type xml_obj: lxml etree root
      :param xml_tree: Main xml tree object containing info on
                       Enums and serializables.
      :type xml_tree: lxml etree root

      :returns: (arg name [string], arg description [string or None], arg obj
                [python object derived from TypeBase]). If there is no args section
                or there are no arguments in the args section, [] is returned.
      :rtype: List of arguments where each argument is a tuple of the form


   .. method:: get_enum_type(self, enum_name, xml_obj)


      Parses and retuns an Enum object for the given enum name.

      Looks in the enums section of the xml dict.

      :param enum_name: Name of the enum to parse
      :type enum_name: string
      :param xml_obj: Parsed Xml object to find the enum in
      :type xml_obj: lxml etree root

      :returns: If the enum name could be found in the xml_obj, a corresponding
                object of type EnumType is returned. Otherwise, None is returned.
                The caller will hold the only reference to the object.


   .. method:: get_serializable_type(self, type_name, xml_obj)


      Parses and retuns a serializable type object for the given type name.

      Looks in the serializables section of the xml dict.

      :param type_name: Name of the type to parse
      :type type_name: string
      :param xml_obj: Parsed Xml object to find type in
      :type xml_obj: lxml etree root

      :returns: If the type name could be found in the xml_obj, a corresponding
                object of a type derived from SerializableType is returned.
                Otherwise, None is returned. The caller will hold the only reference
                to the object.


   .. method:: get_array_type(self, type_name, xml_obj)


      Parses and retuns an array type object for the given type name.

      Looks in the arrays section of the xml dict.

      :param type_name: Name of the type to parse
      :type type_name: string
      :param xml_obj: Parsed Xml object to find type in
      :type xml_obj: lxml etree root

      :returns: If the type name could be found in the xml_obj, a corresponding
                object of a type derived from ArrayType is returned.
                Otherwise, None is returned. The caller will hold the only reference
                to the object.


   .. method:: parse_type(self, type_name, xml_item, xml_tree)


      Parses the given type string and returns a type object.

      :param type_name: Name of the type in the xml
      :type type_name: string
      :param xml_item: Parsed xml object for the item
                       containing the type name being parsed. This is used to get
                       meta data such as string lenght.
      :type xml_item: lxml etree root
      :param xml_tree: Parsed Xml object containing enum and
                       serializable type info (may not be used)
      :type xml_tree: lxml etree root

      :returns: Object of a class derived from the TypeBase class if successful,
                Raises an exception if the parsing fails. The caller will hold the
                only reference to the object.



