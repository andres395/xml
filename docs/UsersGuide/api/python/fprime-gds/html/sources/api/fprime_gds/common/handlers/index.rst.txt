:mod:`fprime_gds.common.handlers`
=================================

.. py:module:: fprime_gds.common.handlers

.. autoapi-nested-parse::

   handlers.py:

   Defines a set of base classes that allow for the system to handle various functions of the system. Primarily this
   defines the "DataHandler" base class for handling data.

   @author mstarch



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   fprime_gds.common.handlers.DataHandler
   fprime_gds.common.handlers.HandlerRegistrar



.. py:class:: DataHandler

   Bases: :class:`abc.ABC`

   Defines the necessary functions required to handle data as part of the F prime project. This allows any implementor
   to be used to handle data.

   .. method:: data_callback(self, data, sender=None)
      :abstractmethod:


      Callback function used to handle data being produced elsewhere in the system and processed by the given object.
      Data supplied should be of a known type for the given object, and sender is an id of the sender. If not supplied
      sender will be None.

      :param data: data to be handled by this class
      :param sender: (optional) id of sender, otherwise None



.. py:class:: HandlerRegistrar

   Bases: :class:`abc.ABC`

   Defines a class that will take in registrants and remember them for calling back later. These objects should be of
   the type "DataHandler" as this handler will send data back to these handlers when asked to do so.

   .. method:: register(self, registrant)


      Register a registrant with this registrar. Will be stored and called back when asked to send data to all the
      handlers registered.

      :param registrant: handler to register


   .. method:: deregister(self, registrant)


      Remove a registrant from the registrar such that it will not be called back later. Note: ignores invalid
      removals by trapping the error, as the desired effect is already satisfied.

      :param registrant: registrant to remove
      :return: True if found, False if not. May safely be ignored.


   .. method:: send_to_all(self, data, sender=None)


      Sends the given data to all registrants.

      :param data: data to send back to registrants
      :param sender: (optional) sender to pass to data_callback



