:mod:`fprime_gds.common.files.uplinker`
=======================================

.. py:module:: fprime_gds.common.files.uplinker

.. autoapi-nested-parse::

   uplinker.py:

   Contains the code necessary to uplink files through the F prime ground system to a running deployment. The file uplink
   process will read in a file from the OS, and uplink it in chunks. The system throttles chunks of the file requiring a
   handshake packet in return before the next chunk is sent out.

   @author lestarch



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   fprime_gds.common.files.uplinker.UplinkQueue
   fprime_gds.common.files.uplinker.FileUplinker



.. py:class:: UplinkQueue(uplinker)

   Handles queuing of files to send to the uplinker. This offloads the work of determining when done, and what to do
   while waiting. It also owns the thread that starts uplink. This thread watches for the current uplink to finish, and
   then it starts the next one and returns to a quiescent state.

   .. method:: enqueue(self, filepath, destination)


      Enqueue the file and destination pair onto the queue

      :param filepath: filepath to upload to the given destination
      :param destination: destination path to upload the filepath to


   .. method:: pause(self)


      Pause the uplinker, setting the running flag off, then holding the busy semaphore


   .. method:: unpause(self)


      Unpause the uplinker, releasing the busy semaphore and then restoring the running flag


   .. method:: is_running(self)


      Check if the uplink is running


   .. method:: remove(self, source)


      Remove a file by its source from the queue and the permanent uplink list. This will touch each record in the
      queue one time, as they are pulled off the queue, inspected, and the replaced.

      :param source: source file to remove


   .. method:: run(self)


      A thread that will uplink files on after another until all files that have been enqueued are properly processed.
      To stop this thread, set the exit event.


   .. method:: current(self)


      Gets a set of current files. This will create a copy, to prevent messing with uplink.

      :return: copy of current files transformed into a JSONable dictionary


   .. method:: exit(self)


      Exit event to shutdown the thread


   .. method:: join(self)


      Join with this uplinker



.. py:class:: FileUplinker(file_encoder, chunk=CHUNK_SIZE, timeout=20)

   Bases: :class:`fprime_gds.common.handlers.DataHandler`

   File uplinking component. Keeps track of the currently uplinking file, and registers as a receiver for the handshake
   packets that are send back on each packet.

   .. attribute:: CHUNK_SIZE
      :annotation: = 256

      

   .. method:: enqueue(self, filepath, destination=None)


      Enqueue files for the upload. This tunnels into the upload queue, which unblocks once files have been enqueued
      and begins to upload each file sequentially.

      :param filepath: filepath to upload to the system
      :param destination: (optional) destination to uplink to. Default: current destination + file's basename


   .. method:: exit(self)


      Exit this uplinker by killing the thread


   .. method:: is_running(self)


      Check if the queue is running


   .. method:: pause(self)


      Pause uplink by canceling the uplink, and then pausing the uplink queue


   .. method:: unpause(self)


      Unpauses the uplink by unpausing the internal queue


   .. method:: cancel_remove(self, file)


      Cancel/remove the uplink of the given file.  If uplinking, it will cancel the uplink, and if queued it will
      remove the file from the queue.  Unknown files will be ignored.

      :param file: file to remove from the uplinker


   .. method:: current_files(self)


      Returns the current set of files held by the uplink queue.

      :return: current files as a list in JSONable format


   .. method:: start(self, file_obj)


      Starts a file uplink to a running F prime deployment. This will open of the file, save the file handle, and emit
      the start file uplink packet. It will also store the state for the file uplink progress. If already uplinking
      then a FileUplinkerBusyException will be raised.

      :param file_obj: file object to upload
      :raises FileUplinkerBusyException: when an upload is already running
      :raises OSError: when file is inaccessible


   .. method:: send(self, packet_data)


      A function to send the packet out.  Starts timeout and then pushes the packet to the file encoder.

      :param packet_data: packet data to send that will be pushed to the encoder


   .. method:: data_callback(self, data, sender=None)


      Process incoming handshake data, and if it is the expected handshake, then it uplinks the next packet. In the
      file. Invalid handshakes are ignore. When finished a returning handshake puts the uplinker into idle state.

      :param data: data from handshake packet to be verified against that previously sent


   .. method:: cancel(self)


      Cancels the currently active file uplink. Will emit a cancel packet to inform the deployment that the file is
      canceled. This merely sets the state to "canceled" and will handle this later. This implies that in the case of
      a timeout, cancels may be ignored.


   .. method:: timeout(self)


      Handles timeout o file packet by finishing the upload immediately, and setting the state to timeout


   .. method:: finish(self, wait_for_handshake=True)


      Finishes the current file uplink by closing the file, and starting the end processs. If the uplinker should
      immediately terminate (like during a timeout) then set wait_for_handshake to False.

      :param wait_for_handshake: (optional) wrap up cleanly by waiting for handshake. Default: True, clean wait


   .. method:: get_next_sequence(self)


      Gets the next sequence number


   .. method:: valid_handshake(self, data)


      Check the handshake data and ensure that it is as expected. This will allow us to only handle handshakes that
      we expected. This will ensure that the handshake data is an exact match of the send data.

      :param data: data to check against what was transmitted
      :return: True, if proper handshake, False otherwise


   .. method:: destination_dir(self)
      :property:


      Get the destination directory that files will be uplinked to, if not currently specified.

      :return: value of destination



.. py:exception:: FileUplinkerBusyException

   Bases: :class:`Exception`

   File uplinker is busy and cannot uplink more files


