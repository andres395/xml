:mod:`fprime_gds.common.pipeline.standard`
==========================================

.. py:module:: fprime_gds.common.pipeline.standard

.. autoapi-nested-parse::

   standard.py:

   This file contains the necessary functions used to setup a standard pipeline that will pull data from the middle-ware
   layer into the python system. This layer is designed to setup the base necessary to running Gds objects up-to the layer
   of decoding. This enables users to generate add-in that function above the decoders, and run on a standard pipeline
   below.

   :author: lestarch



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   fprime_gds.common.pipeline.standard.StandardPipeline



.. py:class:: StandardPipeline

   Class used to encapsulate all of the components of a standard pipeline. The life-cycle of this class follows the
   basic steps:
      1. setup: creates objects needed to read from middle-ware layer and provide data up the stack
      2. register: consumers from this pipeline should register to receive decoder callbacks
      3. run: this pipeline should either take over the standard thread of execution, or be executed on another thread
      4. terminate: called to shutdown the pipeline
   This class provides for basic log files as a fallback for storing events as well. These logs are stored in a given
   directory, which is created on the initialization of this class.

   .. method:: setup(self, config, dictionary, down_store, logging_prefix=None, packet_spec=None)


      Setup the standard pipeline for moving data from the middleware layer through the GDS layers using the standard
      patterns. This allows just registering the consumers, and invoking 'setup' all other of the GDS support layer.

      :param config: config object used when constructing the pipeline.
      :param dictionary: dictionary path. Used to setup loading of dictionaries.
      :param down_store: downlink storage directory
      :param logging_prefix: logging prefix. Defaults to not logging at all.
      :param packet_spec: location of packetized telemetry XML specification.


   .. method:: get_dated_logging_dir(cls, prefix=os.path.expanduser('~'))
      :classmethod:


      Sets up the dated subdirectory based upon a given prefix

      :param prefix:
      :return: Path to new directory where logs will be stored for this pipeline


   .. method:: setup_logging(self, log_dir)


      Setup logging based on the logging prefix supplied

      :param prefix: logging prefix to use


   .. method:: connect(self, address, port)


      Connects to the middleware layer

      :param address: address of middleware
      :param port: port of middleware


   .. method:: disconnect(self)


      Disconnect from socket


   .. method:: send_command(self, command, args)


      Sends commands to the encoder and history.

      :param command: command id from dictionary to get command template
      :param args: arguments to process


   .. method:: dictionaries(self)
      :property:


      Get a dictionaries object

      :return: dictionaries composition


   .. method:: coders(self)
      :property:


      Get a coders object

      :return: coders composition


   .. method:: histories(self)
      :property:


      Get a histories object

      :return: histories composition


   .. method:: files(self)
      :property:


      Files member property

      :return: filing compositions



