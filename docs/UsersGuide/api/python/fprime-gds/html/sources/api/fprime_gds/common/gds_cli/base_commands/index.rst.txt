:mod:`fprime_gds.common.gds_cli.base_commands`
==============================================

.. py:module:: fprime_gds.common.gds_cli.base_commands

.. autoapi-nested-parse::

   A collection of base classes used for the backend implementations of the GDS
   CLI commands



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   fprime_gds.common.gds_cli.base_commands.BaseCommand
   fprime_gds.common.gds_cli.base_commands.QueryHistoryCommand



.. py:class:: BaseCommand

   Bases: :class:`abc.ABC`

   The base class for implementing a GDS CLI command's functionality, once
   arguments are parsed and passed into this command.

   .. method:: _log(cls, log_text: str)
      :classmethod:


      Takes the given string and logs it (by default, logs all output to the
      console). Will ignore empty strings.

      :param log_text: The string to print out


   .. method:: handle_arguments(cls, *args, **kwargs)
      :classmethod:
      :abstractmethod:


      Do something to handle the input arguments given



.. py:class:: QueryHistoryCommand

   Bases: :class:`fprime_gds.common.gds_cli.base_commands.BaseCommand`

   The base class for a set of related GDS CLI commands that need to query and
   display received data from telemetry channels, F' events, command histories,
   or similar functionalities with closely-related interfaces.

   .. method:: _get_item_list(cls, project_dictionary: Dictionaries, filter_predicate: predicates.predicate)
      :classmethod:
      :abstractmethod:


      Gets a sorted list of items from the dictionary, filtered by the given
      predicate, and return it.

      :param project_dictionary: The dictionary object for the project
          containing the item type definitions
      :param filter_predicate: Test API predicate used to filter shown items
      :return: An iterable collection of items that passed the filter


   .. method:: _get_item_list_string(cls, items: Iterable, json: bool = False)
      :classmethod:


      Takes a list of items from the dictionary and returns a human-readable
      string containing their details.

      :param items: An iterable collection of F' data objects
      :param json: Whether to print out each item in JSON format or not
      :return: A string containing the details of each item


   .. method:: _get_upcoming_item(cls, api: IntegrationTestAPI, filter_predicate: predicates.predicate, min_start_time='NOW', timeout: float = 5.0)
      :classmethod:
      :abstractmethod:


      Retrieves an F' item that's occurred since the given time and returns
      its data.


   .. method:: _get_item_string(cls, item, json: bool = False)
      :classmethod:


      Takes an F' item and returns a human-readable string of its data.

      :param item: The F' item to convert to a string
      :param json: Whether to print out each item in JSON format or not
      :return: A string representation of "item"


   .. method:: _get_search_filter(cls, ids: Iterable[int], components: Iterable[str], search: str, json: bool = False)
      :classmethod:


      Returns a predicate that can be used to filter any received messages.
      This is done to link printing code to filtering, so that filtering ALWAYS filters the same strings as are printed.

      NOTE: Currently assumes that item list strings will contain the
      individual strings of each items to work with both, which there's no
      guarantee of if _get_item_list_string is overridden

      :param item: The F' item to convert to a string
      :param json: Whether to convert each item to a JSON representation
          before filtering them
      :return: A string representation of "item"


   .. method:: _list_all_possible_items(cls, dictionary_path: str, search_filter: predicates.predicate, json: bool)
      :classmethod:


      Returns a string of the the information for all relevant possible items
      for this command, filtered using the given predicate.

      :param dictionary_path: The string path to the dictionary file we should
          look for possible items in
      :param search_filter: The predicate to filter the items with
      :param json: Whether to print out each item in JSON format or not
      :return: A string describing each item relevant to this command that
          passes the given filter


   .. method:: _execute_query(cls, connection_info: misc_utils.ConnectionInfo, search_info: misc_utils.SearchInfo, timeout: float)
      :classmethod:


      Takes in the given arguments and uses them to print out a formatted
      string of items the user wants to see from the Test API; if the option
      is present, repeat doing this until the user exits the program.

      For descriptions of these arguments, and more function details, see:
          Gds/src/fprime_gds/executables/fprime_cli.py


   .. method:: handle_arguments(cls, *args, **kwargs)
      :classmethod:


      Handle the given input arguments, then execute the command itself

      NOTE: This is currently just a pass-through method



