:mod:`fprime_gds.executables.utils`
===================================

.. py:module:: fprime_gds.executables.utils

.. autoapi-nested-parse::

   fprime_gds.executables.utils:

   Utility functions to enable the executables package to function seamlessly.



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   fprime_gds.executables.utils.register_process_assassin
   fprime_gds.executables.utils.run_wrapped_application


.. py:exception:: InterruptedError

   Bases: :class:`Exception`

   Common base class for all non-exit exceptions.


.. py:exception:: ProcessNotStableException(name, code, lifespan)

   Bases: :class:`Exception`

   Process did not start up stably. Thus there was a problem.


.. py:exception:: AppWrapperException

   Bases: :class:`Exception`

   An exception occurred while tying to start the app wrapper. This will encapsulate that message.


.. function:: register_process_assassin(process, log=None)

   Register an assassin that will kill the a given child process when an exit of the current python process has been
   reached. This will effectively clean up children and (optionally) their log files.

   :param process: the process to kill.
   :param log: a paired log file to kill as well.


.. function:: run_wrapped_application(arguments, logfile=None, env=None, launch_time=None)

   Run an application and ensure that it is logged immediately to the logfile. This will allow the application to have
   up-to-date logs. This is a wrapper for pexpect to ensure that the application runs and log effectivly. It has been
   converted to a function to remove superfluous processes.

   :param arguments: arguments with the first being the executable.
   :param logfile: (optional) path to logfile to log to. Will overwrite.
   :param env: (optional) environment for the subprocess
   :param: launch_time: (optional) time to wait before declaring the process stable
   :return: child process should it be needed.


