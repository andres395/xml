:mod:`fprime_gds.common.files.helpers`
======================================

.. py:module:: fprime_gds.common.files.helpers

.. autoapi-nested-parse::

   helpers.py:

   Helpers for file uplink, and downlink. This contains shared components, classes, and support architecture in order to
   enable both file uplink and downlink to share the same structures. This includes the following shared objects:

   1. Timeout: for managing timeouts and timeout responses
   2. FileStates: managing the state of an uplink or downlinking file
   3. CFDPChecksum: calculates the CFDP checksum for files
   4. TransmitFile:  file object for up and down

   @author mstarch, and Blake A. Harriman's work



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   fprime_gds.common.files.helpers.Timeout
   fprime_gds.common.files.helpers.FileStates
   fprime_gds.common.files.helpers.CFDPChecksum
   fprime_gds.common.files.helpers.TransmitFile



Functions
~~~~~~~~~

.. autoapisummary::

   fprime_gds.common.files.helpers.file_to_dict


.. py:class:: Timeout

   Starts a timeout thread and will respond with a callback to a function when the timeout expires.

   .. method:: setup(self, callback, timeout=5, args=())


      Sets up the timeout but does not start it.

      :param callback: function called when timeout expires
      :param timeout: (optional) timeout duration. Default: 5 seconds


   .. method:: start(self)


      Starts the timeout after a previous setup.


   .. method:: restart(self)


      Restarts the given timer first canceling and then starting it again.


   .. method:: stop(self)


      Stops the timeout preventing a callback to the stored function.



.. py:class:: FileStates

   Bases: :class:`enum.Enum`

   An enumeration of states used in the file uplinker and downlinker.

   .. attribute:: IDLE
      :annotation: = 0

      

   .. attribute:: RUNNING
      :annotation: = 1

      

   .. attribute:: CANCELED
      :annotation: = 2

      

   .. attribute:: END_WAIT
      :annotation: = 3

      


.. py:class:: CFDPChecksum

   Class running the CFDG checksum

   .. method:: update(self, data, offset)


      Update the checksum


   .. method:: value(self)
      :property:




.. py:class:: TransmitFile(source, destination, size=None, log_dir=None)

   Wraps the file information needed for the uplink and downlinking processes.

   .. method:: open(self, mode='rb')


      Opens the file descriptor and prepares it for uplink/downlink


   .. method:: read(self, chunk)


      Read the chunk from the file


   .. method:: write(self, chunk, offset)


      Write a chunk to the file.

      :param chunk: data to write to the file
      :param offset: offset to write to


   .. method:: close(self)


      Opens the file descriptor and prepares it for uplink


   .. method:: start(self)
      :property:



   .. method:: end(self)
      :property:



   .. method:: source(self)
      :property:



   .. method:: destination(self)
      :property:



   .. method:: size(self)
      :property:



   .. method:: seek(self)
      :property:



   .. method:: state(self)
      :property:



   .. method:: checksum(self)
      :property:



   .. method:: log_handler(self)
      :property:




.. function:: file_to_dict(files, uplink=True)

   Converts files to dictionary. This creates a new list of JSONable file dictionaries.

   :param files: list of TransmitFiles to convert
   :return: list of dictionaries


