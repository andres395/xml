:mod:`fprime_gds.common.history.chrono`
=======================================

.. py:module:: fprime_gds.common.history.chrono

.. autoapi-nested-parse::

   chrono.py:

   A chronologically-ordered history that relies on predicates to provide filtering, searching, and
   retrieval operations. This history will re-order itself based on FSW time.

   :author: koran



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   fprime_gds.common.history.chrono.ChronologicalHistory



.. py:class:: ChronologicalHistory(filter_pred=None)

   Bases: :class:`fprime_gds.common.history.history.History`

   A chronological history to support the GDS test api. This history adds support for specifying
   start with predicates and python's bracket notation.

   .. method:: data_callback(self, data, sender=None)


      Data callback to push an object on the history. This callback will only add data_objects
      that satisfy the filter predicate.

      :param data: object to store


   .. method:: retrieve(self, start=None)


      Retrieve objects from this history. If a starting point is specified, will return a
      sub-list of all objects beginning at start to the latest object.
      Note: if no item satisfies the start predicate or the index is greater than the length of
      the history, an empty list will be returned.

      :param start: optional first object to retrieve. can either be an index (int) or a predicate.

      :returns: a list of objects in chronological order


   .. method:: retrieve_new(self, repeats=False)


      Retrieves a chronological order of objects that haven't been accessed through retrieve or
      retrieve_new before.

      :returns: a list of objects in chronological order


   .. method:: clear(self, start=None)


      Clears objects from history. A clear that specifies a starting point will clear the history
      such that start becomes the earliest element in the history after objects are removed. If
      the start is specified as a predicate, start will be the earliest object to satisfy the
      predicate.
      Note: if no item satisfies the start predicate or the index is greater than the length of
      the history, all items will be cleared.

      :param start: start: an optional indicator for the first item to remove. Can be a predicate, a
                    TimeType or an index in the ordering


   .. method:: size(self)


      Accessor for the number of objects in the history
      :returns: the number of objects (int)


   .. method:: __len__(self)


      Accessor for the number of objects in the history
      :returns: the number of objects


   .. method:: __getitem__(self, index)


      __get_item__ is a special method in python that allows using brackets.
      Example: item = history[2] # this would return the second item in the history.

      :param index: the index of the array to return.

      :returns: the item at the index specified.


   .. method:: __insert_chrono(self, data_object, ordered)


      traverses the existing order (back to front) and inserts the data object in the correct
      position chronologically.
      :param data_object: an item to insert in the history. Must have a get_time() method.
      :param ordered: a list to insert the item into.

      :returns: the index that the item was inserted at (int)


   .. method:: __clear_list(self, start, ordered)


      finds the index that start specifies
      :param start: an optional indicator for the first item to remove. Can be a predicate, a
                    TimeType or an index in the ordering
      :param ordered: the list to clear

      :returns: the index in the given list that start refers to


   .. method:: __get_index(self, start, ordered)


      finds the index that start specifies
      :param start: an indicator of a position in an order can be a predicate, a TimeType time
                    stamp or an index in the ordering
      :param ordered: the list to clear

      :returns: the index in the given list that start refers to



