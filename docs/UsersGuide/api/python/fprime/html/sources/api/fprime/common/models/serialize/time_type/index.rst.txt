:mod:`fprime.common.models.serialize.time_type`
===============================================

.. py:module:: fprime.common.models.serialize.time_type

.. autoapi-nested-parse::

   @file time_tag.py
   @brief Class used to parse and store time tags sent with serialized data

   This Class is used to parse, store, and create human readable strings for the
   time tags sent with serialized data in the fprime architecture.

   @date Created Dec 16, 2015
   @author: dinkel

   @date Updated June 18, 2018
   @author R. Joseph Paetz (rpaetz@jpl.nasa.gov)

   @date Updated July 22, 2019
   @author Kevin C Oran (kevin.c.oran@jpl.nasa.gov)

   @bug No known bugs



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   fprime.common.models.serialize.time_type.TimeType



.. data:: TimeBase
   

   

.. py:class:: TimeType(time_base=0, time_context=0, seconds=0, useconds=0)

   Bases: :class:`fprime.common.models.serialize.type_base.BaseType`

   Representation of the time type

   Used to parse, store, and create human readable versions of the time tags
   included in serialized output from fprime_gds systems

   Note: comparisons support comparing to numbers or other instances of TimeType. If comparing to
   another TimeType, these comparisons use the provided compare method. See TimeType.compare for
   a description of this behavior.  See comparison functions at the end.

   .. method:: _check_useconds(self, useconds)


      Checks if a given microsecond value is valid.

      :param usecs: The value to check
      :type usecs: int

      :returns: None if valid, raises TypeRangeException if not valid.


   .. method:: _check_time_base(self, time_base)


      Checks if a given TimeBase value is valid.

      :param time_base: The value to check
      :type time_base: int

      :returns: Returns if valid, raises TypeRangeException if not valid.


   .. method:: to_jsonable(self)


      JSONable object format


   .. method:: timeBase(self)
      :property:



   .. method:: timeContext(self)
      :property:



   .. method:: seconds(self)
      :property:



   .. method:: useconds(self)
      :property:



   .. method:: serialize(self)


      Serializes the time type

      :returns: Byte array containing serialized time type


   .. method:: deserialize(self, data, offset)


      Deserializes a serialized time type in data starting at offset.

      Internal values to the object are updated.

      :param data: binary data containing the time tag (type = bytearray)
      :param offset: Index in data where time tag starts


   .. method:: getSize(self)


      Return the size of the time type object when serialized

      :returns: The size of the time type object when serialized


   .. method:: compare(t1, t2)
      :staticmethod:


      Compares two TimeType objects

      This function sorts times in the order of: timeBase, secs, usecs, and
      then timeContext.

      :returns: Negative, 0, or positive for t1<t2, t1==t2, t1>t2 respectively


   .. method:: __str__(self)


      Formats the time type object for printing

      :returns: A string representing the time type object


   .. method:: to_readable(self, time_zone=None)


      Returns a string of the time object in a human readable format

      :param time_zone: Time zone to convert the TimeType
                        object to before printing. Timezone also displayed.
                        If time_zone=None, local timezone is used.
                        Defaults to None.
      :type time_zone: tzinfo

      :returns: A human readable string reperesenting the time type object


   .. method:: get_datetime(self, tz=None)


      Returns the python datetime object for UTC time

      :param tz: timezone to create the datetime object
                 in. If tz=None, local time zone used. Defaults to None.
      :type tz: tzinfo

      :returns: datetime object for the time type or None if the time couldn't
                be determined.


   .. method:: set_datetime(self, dt, time_base=65535)


      Sets the timebase from a datetime object.

      :param dt: datetime object to read from time.
      :type dt: datetime


   .. method:: get_float(self)


      a helper method that gets the current TimeType as a float where the non-fraction is seconds
      and the fraction is microseconds. This enables comparisons with numbers.


   .. method:: __lt__(self, other)


      Less than


   .. method:: __le__(self, other)


      Less than or equal


   .. method:: __eq__(self, other)


      Equal


   .. method:: __ne__(self, other)


      Not equal


   .. method:: __gt__(self, other)


      Greater than


   .. method:: __ge__(self, other)


      Greater than or equal


   .. method:: set_float(self, num)


      a helper method that takes a float and sets a TimeType's seconds and useconds fields.
      Note: This method is private because it is only used by the _get_type_from_float helper to
      generate new TimeType instances. It is not meant to be used to modify an existing timestamp.
      Note: Present implementation will set any negative result to 0


   .. method:: get_type_from_float(self, num)


      a helper method that returns a new instance of TimeType and sets the seconds and useconds
      fields using the given number. The new TimeType's time_base and time_context will be
      preserved from the calling object.


   .. method:: __add__(self, other)


      Addition


   .. method:: __sub__(self, other)


      Subtraction


   .. method:: __mul__(self, other)


      Multiplication


   .. method:: __truediv__(self, other)


      True division


   .. method:: __floordiv__(self, other)


      Floored divisionv


   .. method:: __radd__(self, other)


      Reflected addition


   .. method:: __rsub__(self, other)


      Reflected subtraction


   .. method:: __rmul__(self, other)


      Reflected multiplication


   .. method:: __rtruediv__(self, other)


      Reflected division


   .. method:: __rfloordiv__(self, other)


      Reflected floored division



