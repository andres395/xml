:mod:`fprime.common.models.serialize.numerical_types`
=====================================================

.. py:module:: fprime.common.models.serialize.numerical_types

.. autoapi-nested-parse::

   numerical_types.py:

   A file that contains the definitions for all the integer types provided as part of F prime.  F prime supports integers
   that map to stdint.h integer sizes, that is, 8-bit, 16-bit, 32-bit, and 64-bit signed and unsigned integers.

   @author mstarch



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   fprime.common.models.serialize.numerical_types.NumericalType
   fprime.common.models.serialize.numerical_types.IntegerType
   fprime.common.models.serialize.numerical_types.FloatType
   fprime.common.models.serialize.numerical_types.I8Type
   fprime.common.models.serialize.numerical_types.I16Type
   fprime.common.models.serialize.numerical_types.I32Type
   fprime.common.models.serialize.numerical_types.I64Type
   fprime.common.models.serialize.numerical_types.U8Type
   fprime.common.models.serialize.numerical_types.U16Type
   fprime.common.models.serialize.numerical_types.U32Type
   fprime.common.models.serialize.numerical_types.U64Type
   fprime.common.models.serialize.numerical_types.F32Type
   fprime.common.models.serialize.numerical_types.F64Type



.. data:: BITS_RE
   

   

.. py:class:: NumericalType(val=None)

   Bases: :class:`fprime.common.models.serialize.type_base.ValueType`, :class:`abc.ABC`

   Numerical types that can be serialized using struct and are of some power of 2 byte width

   .. method:: get_bits(cls)
      :classmethod:


      Gets the integer bits of a given type


   .. method:: getSize(cls)
      :classmethod:


      Gets the size of the integer based on the size specified in the class name


   .. method:: get_serialize_format()
      :staticmethod:
      :abstractmethod:


      Gets the format serialization string such that the class can be serialized via struct


   .. method:: serialize(self)


      Serializes this type using struct and the val property


   .. method:: deserialize(self, data, offset)


      Serializes this type using struct and the val property



.. py:class:: IntegerType(val=None)

   Bases: :class:`fprime.common.models.serialize.numerical_types.NumericalType`, :class:`abc.ABC`

   Base class thar represents all integer common functions

   .. method:: validate(self, val)


      Validates the given integer.



.. py:class:: FloatType(val=None)

   Bases: :class:`fprime.common.models.serialize.numerical_types.NumericalType`, :class:`abc.ABC`

   Base class thar represents all float common functions

   .. method:: validate(self, val)


      Validates the given integer.



.. py:class:: I8Type(val=None)

   Bases: :class:`fprime.common.models.serialize.numerical_types.IntegerType`

   Single byte integer type. Represents C chars

   .. method:: get_serialize_format()
      :staticmethod:


      Allows serialization using struct



.. py:class:: I16Type(val=None)

   Bases: :class:`fprime.common.models.serialize.numerical_types.IntegerType`

   Double byte integer type. Represents C shorts

   .. method:: get_serialize_format()
      :staticmethod:


      Allows serialization using struct



.. py:class:: I32Type(val=None)

   Bases: :class:`fprime.common.models.serialize.numerical_types.IntegerType`

   Four byte integer type. Represents C int32_t,

   .. method:: get_serialize_format()
      :staticmethod:


      Allows serialization using struct



.. py:class:: I64Type(val=None)

   Bases: :class:`fprime.common.models.serialize.numerical_types.IntegerType`

   Eight byte integer type. Represents C int64_t,

   .. method:: get_serialize_format()
      :staticmethod:


      Allows serialization using struct



.. py:class:: U8Type(val=None)

   Bases: :class:`fprime.common.models.serialize.numerical_types.IntegerType`

   Single byte integer type. Represents C chars

   .. method:: get_serialize_format()
      :staticmethod:


      Allows serialization using struct



.. py:class:: U16Type(val=None)

   Bases: :class:`fprime.common.models.serialize.numerical_types.IntegerType`

   Double byte integer type. Represents C shorts

   .. method:: get_serialize_format()
      :staticmethod:


      Allows serialization using struct



.. py:class:: U32Type(val=None)

   Bases: :class:`fprime.common.models.serialize.numerical_types.IntegerType`

   Four byte integer type. Represents C unt32_t,

   .. method:: get_serialize_format()
      :staticmethod:


      Allows serialization using struct



.. py:class:: U64Type(val=None)

   Bases: :class:`fprime.common.models.serialize.numerical_types.IntegerType`

   Eight byte integer type. Represents C unt64_t,

   .. method:: get_serialize_format()
      :staticmethod:


      Allows serialization using struct



.. py:class:: F32Type(val=None)

   Bases: :class:`fprime.common.models.serialize.numerical_types.FloatType`

   Eight byte integer type. Represents C unt64_t,

   .. method:: get_serialize_format()
      :staticmethod:


      Allows serialization using struct



.. py:class:: F64Type(val=None)

   Bases: :class:`fprime.common.models.serialize.numerical_types.FloatType`

   Eight byte integer type. Represents C unt64_t,

   .. method:: get_serialize_format()
      :staticmethod:


      Allows serialization using struct



